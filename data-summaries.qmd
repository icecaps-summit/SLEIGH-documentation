# Data Summaries {.unnumbered}

This chapter will describe the summarization process applied to the data, prior to its transfer via Iridium satellite network to SANTA (**S**LEIGH **A**ccess **N**ode for data **T**ransfer and **A**nalysis).

The output of `ncdump` commands are also provided at the end of each instrument's section, to display what variables are contained in the original files.

**Note:** the data summarisation is a work in process. If a particular instrument isn't described, or the variables for a given instrument won't be sufficient to assess its performance, get in touch with Andrew Martin.

## Notation

The variables reorded by the instruments will be described in tables below, and the descriptions for the reducing of the data will take the form:

+ The variable name will be described in the `var` collumn, as it is given in the .nc, .dat or .csv files onboard iceman.

+ The dimensions for each variable will be described in the `dims` collumn. For each instrument, the resolution and length of the original dimensions will be described.

+ The data reductions will aggregate data along these dimensions to produce new dimensions, described for each variable in `new_dims`. The resolution and size of these dimensions will also be described.

+ The function(s) used to aggregate the data from `dims` to `new_dims` will be described in the collumn `fn`.

+ A brief description of the use of these reduced variables will be given in the `details` collumn, as well as any other supporting information.


## cl61

### Location

```
data
├── cl61
    ├── live_YYYYmmdd_HHMMss.nc
```

### Dimensions
| dimension | resolution | length |
|-----------|------------|--------|
| time      | *FILL*     | (unlimitted) |
| layer     | 1 | 5 |
| time'     | 15 minutes | 96 per day |
: {.striped .bordered}

### Variables
| var | dims | new_dims | fn | units | details
|-|-|-|-|-|------|
| cloud_base_heights | time, layer | time', layer | mean, std, nullrate | m | The 15-minute mean and standard deviation of the cloud base height for each detected cloud layer |
| cloud_thickness | time, layer | time', layer | mean, std, nullrate | m | The 15-minute mean and standard deviation of the cloud geometric thickness for each detected cloud layer |
| beta_att_sum | time | time' | median, std, nullrate | $10^{-4}$ sr$^{-1}$ | The 15-miunte median and standard deviation of the vertically-integrated backscatter coefficient |
| tilt_angle | time | time' | mean, std, nullrate | ° | 15-minute mean and standard deviation of the instrument zenith angle (from vertical) |
| precipitation_detection | time | time' | sum, nullrate | 1 | The number of recorded profiles in which precipitation was detected |
| fog_detection | time | time' | sum, nullrate | 1 | The number of recorded profiles within which fog was detected |
| time | time | time' | count | 1 | The number of recorded profiles per 15-minute window. A proxy for instrument uptime |
: {.striped .bordered}

### ncdump
::: {.callout-note collapse="true" appearance="minimal" title='ncdump'}
```
ncdump -h live_20240214_144450.nc

netcdf live_20240214_144450 {
dimensions:
	range = 3276 ;
	layer = 5 ;
	time = UNLIMITED ; // (5 currently)
variables:
	int cloud_base_heights(time, layer) ;
		cloud_base_heights:_FillValue = -99 ;
		cloud_base_heights:units = "m" ;
		cloud_base_heights:long_name = "heights (range) of the detected cloud bases" ;
		cloud_base_heights:coordinates = "time layer longitude latitude" ;
	int vertical_visibility(time) ;
		vertical_visibility:_FillValue = -99 ;
		vertical_visibility:units = "m" ;
		vertical_visibility:long_name = "visibility in the direction of the instrument beam" ;
		vertical_visibility:coordinates = "time longitude latitude" ;
	float p_pol(time, range) ;
		p_pol:_FillValue = -999.f ;
		p_pol:units = "1/(m*sr)" ;
		p_pol:long_name = "parallel-polarized component of the backscattered light" ;
		p_pol:coordinates = "time range longitude latitude" ;
		p_pol:averaging_time_in_seconds = 60 ;
	float x_pol(time, range) ;
		x_pol:_FillValue = -999.f ;
		x_pol:units = "1/(m*sr)" ;
		x_pol:long_name = "cross-polarized component of the backscattered light" ;
		x_pol:coordinates = "time range longitude latitude" ;
		x_pol:averaging_time_in_seconds = 60 ;
	float beta_att(time, range) ;
		beta_att:_FillValue = -999.f ;
		beta_att:units = "1/(m*sr)" ;
		beta_att:long_name = "attenuated volume backscatter coefficient" ;
		beta_att:coordinates = "time range longitude latitude" ;
		beta_att:averaging_time_in_seconds = 60 ;
	float linear_depol_ratio(time, range) ;
		linear_depol_ratio:_FillValue = -999.f ;
		linear_depol_ratio:long_name = "linear depolarisation ratio of the backscatter volume" ;
		linear_depol_ratio:coordinates = "time range longitude latitude" ;
		linear_depol_ratio:averaging_time_in_seconds = 60 ;
	double time(time) ;
		time:_FillValue = -999. ;
		time:units = "seconds since 1970-01-01 00:00:00.000" ;
		time:long_name = "Time" ;
		time:axis = "T" ;
		time:standard_name = "time" ;
		time:cf_role = "profile_id" ;
		time:comment = "represents the end of the averaging period" ;
	double range(range) ;
		range:_FillValue = -999. ;
		range:units = "m" ;
		range:long_name = "measurement distance from the instrument in the direction of the transmitted laser beam" ;
		range:axis = "Z" ;
		range:positive = "up" ;
	int layer(layer) ;
		layer:_FillValue = -999 ;
		layer:units = "layer" ;
		layer:long_name = "number of the observed cloud layer (1,2,...,5)" ;
	double longitude ;
		longitude:_FillValue = -999. ;
		longitude:units = "degrees_east" ;
		longitude:long_name = "longitude" ;
		longitude:standard_name = "longitude" ;
	double latitude ;
		latitude:_FillValue = -999. ;
		latitude:units = "degrees_north" ;
		latitude:long_name = "latitude" ;
		latitude:standard_name = "latitude" ;
	int elevation ;
		elevation:_FillValue = -999 ;
		elevation:units = "m" ;
		elevation:long_name = "elevation" ;
		elevation:standard_name = "ground_level_altitude" ;
		elevation:comment = "measurement site height above or below a fixed reference point, most commonly a reference geoid" ;
	double azimuth_angle ;
		azimuth_angle:_FillValue = -999. ;
		azimuth_angle:units = "degrees" ;
		azimuth_angle:long_name = "measurement azimuth angle" ;
		azimuth_angle:standard_name = "sensor_azimuth_angle" ;
		azimuth_angle:comment = "reference direction: north" ;
	double beta_att_sum(time) ;
		beta_att_sum:_FillValue = -999. ;
		beta_att_sum:units = "1/(10^4*sr)" ;
		beta_att_sum:long_name = "scaled integral of the attenuated volume backscatter coefficient" ;
	double beta_att_noise_level(time) ;
		beta_att_noise_level:_FillValue = -999. ;
		beta_att_noise_level:long_name = "a unitless number describing the noise level of the attenuated volume backscatter coefficient" ;
	short tilt_correction(time) ;
		tilt_correction:_FillValue = -999s ;
		tilt_correction:long_name = "tilt correction" ;
		tilt_correction:comment = "on/off (1/0)" ;
	float tilt_angle(time) ;
		tilt_angle:_FillValue = -999.f ;
		tilt_angle:units = "degrees" ;
		tilt_angle:standard_name = "zenith_angle" ;
		tilt_angle:long_name = "instrument tilt angle from the vertical" ;
	short height_offset(time) ;
		height_offset:_FillValue = -999s ;
		height_offset:long_name = "instrument height offset to reference level" ;
		height_offset:comment = "positive, if the instrument is placed e.g. on the roof of a building. Negative, if the instrument is placed below the ground level altitude e.g. in a pit. This value will be added to the cloud base height results." ;
		height_offset:units = "m" ;
	short airplane_filter_max_range ;
		airplane_filter_max_range:_FillValue = -999s ;
		airplane_filter_max_range:units = "m" ;
		airplane_filter_max_range:long_name = "airplane filter max range" ;
		airplane_filter_max_range:comment = "user configured value, zero for not in use, otherwise the configured range" ;
	short sky_condition_total_cloud_cover(time) ;
		sky_condition_total_cloud_cover:_FillValue = -99s ;
		sky_condition_total_cloud_cover:units = "oktas" ;
		sky_condition_total_cloud_cover:long_name = "total amount of cloud cover" ;
		sky_condition_total_cloud_cover:comment = "aggregated across layers" ;
		sky_condition_total_cloud_cover:coordinates = "time longitude latitude" ;
	short sky_condition_cloud_layer_covers(time, layer) ;
		sky_condition_cloud_layer_covers:_FillValue = -99s ;
		sky_condition_cloud_layer_covers:units = "oktas" ;
		sky_condition_cloud_layer_covers:long_name = "amount of cloud cover in different cloud layers" ;
		sky_condition_cloud_layer_covers:comment = "for up to 5 layers" ;
		sky_condition_cloud_layer_covers:coordinates = "time layer longitude latitude" ;
	int sky_condition_cloud_layer_heights(time, layer) ;
		sky_condition_cloud_layer_heights:_FillValue = -99 ;
		sky_condition_cloud_layer_heights:units = "m" ;
		sky_condition_cloud_layer_heights:long_name = "height of different cloud layers" ;
		sky_condition_cloud_layer_heights:comment = "for up to 5 layers" ;
		sky_condition_cloud_layer_heights:coordinates = "time layer longitude latitude" ;
	int cloud_penetration_depth(time, layer) ;
		cloud_penetration_depth:_FillValue = -99 ;
		cloud_penetration_depth:units = "m" ;
		cloud_penetration_depth:long_name = "cloud penetration depth in the direction of the instrument beam" ;
		cloud_penetration_depth:coordinates = "time layer longitude latitude" ;
	int cloud_thickness(time, layer) ;
		cloud_thickness:_FillValue = -99 ;
		cloud_thickness:units = "m" ;
		cloud_thickness:long_name = "cloud thickness in the direction of the instrument beam" ;
		cloud_thickness:coordinates = "time layer longitude latitude" ;
	short precipitation_detection(time) ;
		precipitation_detection:_FillValue = -999s ;
		precipitation_detection:long_name = "detection of ground reaching precipitation" ;
		precipitation_detection:comment = "detected/not-detected (1/0)" ;
		precipitation_detection:coordinates = "time longitude latitude" ;
	short fog_detection(time) ;
		fog_detection:_FillValue = -999s ;
		fog_detection:long_name = "detection of fog" ;
		fog_detection:comment = "detected/not-detected (1/0)" ;
		fog_detection:coordinates = "time longitude latitude" ;
	short receiver_gain(time) ;
		receiver_gain:_FillValue = -999s ;
		receiver_gain:long_name = "receiver gain status" ;
		receiver_gain:comment = "high-gain/low-gain (1/0)" ;
	float range_resolution ;
		range_resolution:_FillValue = -999.f ;
		range_resolution:units = "m" ;
		range_resolution:long_name = "range resolution" ;
		range_resolution:comment = "distance between consecutive profile elements" ;
	double cloud_calibration_factor ;
		cloud_calibration_factor:_FillValue = -999. ;
		cloud_calibration_factor:long_name = "factory cloud calibration value" ;
		cloud_calibration_factor:comment = "instrument specific beta_att calibration value measured at the factory" ;
	double cloud_calibration_factor_user ;
		cloud_calibration_factor_user:_FillValue = -999. ;
		cloud_calibration_factor_user:long_name = "user set cloud calibration value" ;
		cloud_calibration_factor_user:comment = "instrument specific beta_att calibration value set by the user, same as the factory value by default" ;
	float overlap_function(range) ;
		overlap_function:_FillValue = -999.f ;
		overlap_function:long_name = "instrument specific overlap function" ;
		overlap_function:comment = "shares the vertical resolution of profiles" ;

// global attributes:
		:title = "CL61D CL61 with Depolarization" ;
		:institution = "" ;
		:source = "" ;
		:conventions = "CF-1.8" ;
		:schema_version = "1.3" ;
		:sw_version = "1.2.7" ;
		:history = "" ;
		:comment = "" ;
		:unit = "m" ;
		:instrument_serial_number = "U1510972" ;
		:overlap_function_provided = 1s ;
		:overlap_is_corrected = 1s ;
		:file_temporal_span_in_minutes = 5. ;
		:profile_interval_in_seconds = 60 ;

group: monitoring {
  variables:
  	double time(time) ;
  		time:_FillValue = -999. ;
  		time:units = "seconds since 1970-01-01 00:00:00.000" ;
  		time:long_name = "Time" ;
  		time:axis = "T" ;
  		time:standard_name = "time" ;
  	float window_condition(time) ;
  		window_condition:_FillValue = -999.f ;
  		window_condition:units = "percent" ;
  		window_condition:long_name = "window condition" ;
  		window_condition:comment = "100 for a clean, 0 for a totally dirty window" ;
  	float laser_power_percent(time) ;
  		laser_power_percent:_FillValue = -999.f ;
  		laser_power_percent:units = "percent" ;
  		laser_power_percent:long_name = "laser power percent" ;
  	float background_radiance(time) ;
  		background_radiance:_FillValue = -999.f ;
  		background_radiance:long_name = "background radiance" ;
  		background_radiance:range = "[0 1747]" ;
  	float internal_temperature(time) ;
  		internal_temperature:_FillValue = -999.f ;
  		internal_temperature:units = "celsius" ;
  		internal_temperature:long_name = "internal temperature" ;
  	float internal_humidity(time) ;
  		internal_humidity:_FillValue = -999.f ;
  		internal_humidity:units = "RH" ;
  		internal_humidity:long_name = "internal humidity" ;
  		internal_humidity:comment = "percent (% RH)" ;
  	float internal_pressure(time) ;
  		internal_pressure:_FillValue = -999.f ;
  		internal_pressure:units = "hPa" ;
  		internal_pressure:long_name = "internal pressure" ;
  	float laser_temperature(time) ;
  		laser_temperature:_FillValue = -999.f ;
  		laser_temperature:units = "celsius" ;
  		laser_temperature:long_name = "laser temperature" ;
  	float window_blower(time) ;
  		window_blower:_FillValue = -999.f ;
  		window_blower:long_name = "window blower" ;
  		window_blower:comment = "on/off (1/0)" ;
  	float internal_heater(time) ;
  		internal_heater:_FillValue = -999.f ;
  		internal_heater:long_name = "internal heater" ;
  		internal_heater:comment = "on/off (1/0)" ;
  	float window_blower_heater(time) ;
  		window_blower_heater:_FillValue = -999.f ;
  		window_blower_heater:long_name = "window blower heater" ;
  		window_blower_heater:comment = "on/off (1/0)" ;
  	float transmitter_enclosure_temperature(time) ;
  		transmitter_enclosure_temperature:_FillValue = -999.f ;
  		transmitter_enclosure_temperature:units = "celsius" ;
  		transmitter_enclosure_temperature:long_name = "transmitter enclosure temperature" ;
  } // group monitoring

group: status {
  variables:
  	double time(time) ;
  		time:_FillValue = -999. ;
  		time:units = "seconds since 1970-01-01 00:00:00.000" ;
  		time:long_name = "Time" ;
  		time:axis = "T" ;
  		time:standard_name = "time" ;
  	short Device_controller_temperature(time) ;
  		Device_controller_temperature:_FillValue = -999s ;
  		Device_controller_temperature:long_name = "Device_controller_temperature" ;
  	short Device_controller_electronics(time) ;
  		Device_controller_electronics:_FillValue = -999s ;
  		Device_controller_electronics:long_name = "Device_controller_electronics" ;
  	short Device_controller_overall(time) ;
  		Device_controller_overall:_FillValue = -999s ;
  		Device_controller_overall:long_name = "Device_controller_overall" ;
  	short Optics_unit_accelerometer(time) ;
  		Optics_unit_accelerometer:_FillValue = -999s ;
  		Optics_unit_accelerometer:long_name = "Optics_unit_accelerometer" ;
  	short Optics_unit_electronics(time) ;
  		Optics_unit_electronics:_FillValue = -999s ;
  		Optics_unit_electronics:long_name = "Optics_unit_electronics" ;
  	short Optics_unit_overall(time) ;
  		Optics_unit_overall:_FillValue = -999s ;
  		Optics_unit_overall:long_name = "Optics_unit_overall" ;
  	short Optics_unit_memory(time) ;
  		Optics_unit_memory:_FillValue = -999s ;
  		Optics_unit_memory:long_name = "Optics_unit_memory" ;
  	short Optics_unit_tilt_angle(time) ;
  		Optics_unit_tilt_angle:_FillValue = -999s ;
  		Optics_unit_tilt_angle:long_name = "Optics_unit_tilt_angle" ;
  	short Receiver_electronics(time) ;
  		Receiver_electronics:_FillValue = -999s ;
  		Receiver_electronics:long_name = "Receiver_electronics" ;
  	short Receiver_overall(time) ;
  		Receiver_overall:_FillValue = -999s ;
  		Receiver_overall:long_name = "Receiver_overall" ;
  	short Receiver_memory(time) ;
  		Receiver_memory:_FillValue = -999s ;
  		Receiver_memory:long_name = "Receiver_memory" ;
  	short Receiver_voltage(time) ;
  		Receiver_voltage:_FillValue = -999s ;
  		Receiver_voltage:long_name = "Receiver_voltage" ;
  	short Receiver_solar_saturation(time) ;
  		Receiver_solar_saturation:_FillValue = -999s ;
  		Receiver_solar_saturation:long_name = "Receiver_solar_saturation" ;
  	short Window_blocking(time) ;
  		Window_blocking:_FillValue = -999s ;
  		Window_blocking:long_name = "Window_blocking" ;
  	short Window_condition(time) ;
  		Window_condition:_FillValue = -999s ;
  		Window_condition:long_name = "Window_condition" ;
  	short Window_blower_fan(time) ;
  		Window_blower_fan:_FillValue = -999s ;
  		Window_blower_fan:long_name = "Window_blower_fan" ;
  	short Window_blower_heater(time) ;
  		Window_blower_heater:_FillValue = -999s ;
  		Window_blower_heater:long_name = "Window_blower_heater" ;
  	short Servo_drive_electronics(time) ;
  		Servo_drive_electronics:_FillValue = -999s ;
  		Servo_drive_electronics:long_name = "Servo_drive_electronics" ;
  	short Servo_drive_overall(time) ;
  		Servo_drive_overall:_FillValue = -999s ;
  		Servo_drive_overall:long_name = "Servo_drive_overall" ;
  	short Servo_drive_memory(time) ;
  		Servo_drive_memory:_FillValue = -999s ;
  		Servo_drive_memory:long_name = "Servo_drive_memory" ;
  	short Servo_drive_control(time) ;
  		Servo_drive_control:_FillValue = -999s ;
  		Servo_drive_control:long_name = "Servo_drive_control" ;
  	short Servo_drive_ready(time) ;
  		Servo_drive_ready:_FillValue = -999s ;
  		Servo_drive_ready:long_name = "Servo_drive_ready" ;
  	short Transmitter_electronics(time) ;
  		Transmitter_electronics:_FillValue = -999s ;
  		Transmitter_electronics:long_name = "Transmitter_electronics" ;
  	short Transmitter_light_source(time) ;
  		Transmitter_light_source:_FillValue = -999s ;
  		Transmitter_light_source:long_name = "Transmitter_light_source" ;
  	short Transmitter_light_source_power(time) ;
  		Transmitter_light_source_power:_FillValue = -999s ;
  		Transmitter_light_source_power:long_name = "Transmitter_light_source_power" ;
  	short Transmitter_overall(time) ;
  		Transmitter_overall:_FillValue = -999s ;
  		Transmitter_overall:long_name = "Transmitter_overall" ;
  	short Transmitter_light_source_safety(time) ;
  		Transmitter_light_source_safety:_FillValue = -999s ;
  		Transmitter_light_source_safety:long_name = "Transmitter_light_source_safety" ;
  	short Transmitter_memory(time) ;
  		Transmitter_memory:_FillValue = -999s ;
  		Transmitter_memory:long_name = "Transmitter_memory" ;
  	short Maintenance_overall(time) ;
  		Maintenance_overall:_FillValue = -999s ;
  		Maintenance_overall:long_name = "Maintenance_overall" ;
  	short Device_overall(time) ;
  		Device_overall:_FillValue = -999s ;
  		Device_overall:long_name = "Device_overall" ;
  	short Recently_started(time) ;
  		Recently_started:_FillValue = -999s ;
  		Recently_started:long_name = "Recently_started" ;
  	short Measurement_status(time) ;
  		Measurement_status:_FillValue = -999s ;
  		Measurement_status:long_name = "Measurement_status" ;
  	short Datacom_overall(time) ;
  		Datacom_overall:_FillValue = -999s ;
  		Datacom_overall:long_name = "Datacom_overall" ;
  	short Measurement_data_destination_not_set(time) ;
  		Measurement_data_destination_not_set:_FillValue = -999s ;
  		Measurement_data_destination_not_set:long_name = "Measurement_data_destination_not_set" ;
  	short Inside_heater(time) ;
  		Inside_heater:_FillValue = -999s ;
  		Inside_heater:long_name = "Inside_heater" ;
  	short Receiver_sensitivity(time) ;
  		Receiver_sensitivity:_FillValue = -999s ;
  		Receiver_sensitivity:long_name = "Receiver_sensitivity" ;
  	short Data_generation_status(time) ;
  		Data_generation_status:_FillValue = -999s ;
  		Data_generation_status:long_name = "Data_generation_status" ;
  } // group status
}
```
:::


## MWR 

### Location

```
data
├── mwr
    ├── level0
    |   ├── YYmmddHH.BRT
	|	├── YYmmddHH.BRT.NC
	|	├── YYmmddHH.HKD
	|	├── YYmmddHH.HKD.NC
	|   ├── YYmmddHH.MET
	|	├── YYmmddHH.MET.NC
	|
	├── vmdata
```

### Dimensions

| dimension | resolution | length |
|-|-|-|
| time | *FILL* | (unlimitted) |
| number_frequencies | 1 | 8 |
| time' | 15 minutes | 96 per day |
: {.striped .bordered}


### Variables

#### BRT

| var | dims | new_dims | fn | units | details |
|-|-|-|-|-|-----|
| time | time | time' | count | 1 | The number of data records every 15 minutes. Proxy for instrument uptime |
| RF | time | time' | sum | 1 | The number of data points where the rain flag is present |
| TBs | time, number_frequencies | time', number_frequencies | mean, std | K | 15-minute mean and standard deviation of the brightness temperatures at each recorded frequency |
: {.striped .bordered}


##### ncdump
::: {.callout-note collapse='true' appearance='minimal' title='ncdump'}
```
ncdump -h 23100921.BRT.NC

netcdf \23100921.BRT {
dimensions:
	number_frequencies = 8 ;
	time = UNLIMITED ; // (3359 currently)
variables:
	int file_code ;
		file_code:long_name = "four byte code identifying file type and version" ;
	int Rad_ID ;
		Rad_ID:long_name = "radiometer model ID" ;
		Rad_ID:comment = "RPG-HUMPRO-U90" ;
	int time(time) ;
		time:long_name = "sample time" ;
		time:units = "seconds since 1.1.2001, 00:00:00" ;
		time:comment = "time is UTC" ;
	int RSFactor ;
		RSFactor:long_name = "rapid sampling multiplier (1 / 2 / 4)" ;
		RSFactor:units = "unitless" ;
		RSFactor:Comment = "Sampling interval: 1: 1 sec, 2: 0.5 sec , 4: 0.25 sec" ;
	int IntSampCnt ;
		IntSampCnt:long_name = "Number of Integration Samples" ;
		IntSampCnt:units = "unitless" ;
	float Freq(number_frequencies) ;
		Freq:long_name = "Channel Center Frequency" ;
		Freq:units = "GHz" ;
	float Min_TBs(number_frequencies) ;
		Min_TBs:long_name = "Minimum TBs in File" ;
		Min_TBs:units = "K" ;
	float Max_TBs(number_frequencies) ;
		Max_TBs:long_name = "Maximum TBs in File" ;
		Max_TBs:units = "K" ;
	int RF(time) ;
		RF:long_name = "Rain Flag" ;
		RF:Info = "0 = No Rain, 1 = Raining" ;
	float ElAng(time) ;
		ElAng:long_name = "Elevation Viewing Angle" ;
		ElAng:comment = "-90 is blackbody view, 0 is horizontal view (red arrow), 90 is zenith view, 180 is horizontal view (2nd quadrant)" ;
		ElAng:units = "degrees (-90 - 180)" ;
	float AziAng(time) ;
		AziAng:long_name = "Azimuth Viewing Angle" ;
		AziAng:units = "DEG (0 DEG - 360 DEG)" ;
	float TBs(time, number_frequencies) ;
		TBs:long_name = "TB Map" ;
		TBs:units = "K" ;

// global attributes:
		:netCDF_Convention = " CF-1.0" ;
		:Radiometer_Location = " University of Madison" ;
		:Radiometer_System = " RPG-HATPRO" ;
		:Serial_Number = " R-DPR-19/007" ;
		:Station_Altitude = " 200" ;
		:Station_Longitude = " 85?43\'55\'\' West" ;
		:Station_Latitude = " 43?22\'42\'\' North" ;
		:Comment = " " ;
		:Radiometer_Software_Version = "V9.69" ;
		:Host-PC_Software_Version = "V9.69" ;
}

```
:::

#### HKD

| var | dims | new_dims | fn | units | details |
|-|-|-|-|-|-----|
| time | time | time' | count | 1 | The number of data records every 15 minutes, proxy for instrument uptime |
| ALFL | time | time' | sum | 1 | Sum of **AL**arm **FL**ags, indicating critical system status |
| AT1_T | time | time' | mean, std | K | Ambient target 1 temperature |
| AT2_T | time | time' | mean, std | K | Ambient target 2 termperature |
| Rec1_T | time | time' | mean, std | K | Receiver 1 temperature |
| Rec2_T | time | time' | mean, std | K | Receiver 2 temperature |
| Rec1_Stab | time | time' | mean, std | K | Receiver 1 temperature stability |
| Rec2_Stab | time | time' | mean, std | K | Receiver 2 temperature stability |
: {.striped .bordered}


##### ncdump
::: {.callout-note collapse='true' appearance='minimal' title='ncdump'}
```
ncdump -h 23100920.HKD.NC

netcdf \23100920.HKD {
dimensions:
	time = UNLIMITED ; // (3464 currently)
variables:
	int file_code ;
		file_code:long_name = "four byte code identifying file type and version" ;
	int Rad_ID ;
		Rad_ID:long_name = "radiometer model ID" ;
		Rad_ID:comment = "RPG-HUMPRO-U90" ;
	int time(time) ;
		time:long_name = "sample time" ;
		time:units = "seconds since 1.1.2001, 00:00:00" ;
		time:comment = "time is UTC" ;
	int RSFactor ;
		RSFactor:long_name = "rapid sampling multiplier (1 / 2 / 4)" ;
		RSFactor:units = "unitless" ;
		RSFactor:Comment = "Sampling interval: 1: 1 sec, 2: 0.5 sec , 4: 0.25 sec" ;
	int EnaFl ;
		EnaFl:long_name = "HKD Enable Flags" ;
		EnaFl:units = "unitless" ;
	int AlFl(time) ;
		AlFl:long_name = "Alarm Flag indicating critical system status" ;
		AlFl:comment = "0: Radiometer HW-Status OK, 1: HW-Problem has occurred" ;
	float GPSLong(time) ;
		GPSLong:long_name = "GPS longitude" ;
		GPSLong:units = "Degrees.Minutes East" ;
		GPSLong:Format = "DDMM.mmmm, D=Degree, M=Minute" ;
	float GPSLat(time) ;
		GPSLat:long_name = "GPS latitude" ;
		GPSLat:units = "Degrees.Minutes North" ;
		GPSLat:Format = "DDMM.mmmm, D=Degree, M=Minute" ;
	float AT1_T(time) ;
		AT1_T:long_name = "Ambient Target Sensor1 Temperature" ;
		AT1_T:units = "K" ;
	float AT2_T(time) ;
		AT2_T:long_name = "Ambient Target Sensor2 Temperature" ;
		AT2_T:units = "K" ;
	float Rec1_T(time) ;
		Rec1_T:long_name = "Receiver1 Temperature" ;
		Rec1_T:units = "K" ;
	float Rec2_T(time) ;
		Rec2_T:long_name = "Receiver2 Temperature" ;
		Rec2_T:units = "K" ;
	float Rec1_Stab(time) ;
		Rec1_Stab:long_name = "Receiver1 Temperature Stability" ;
		Rec1_Stab:units = "K" ;
	float Rec2_Stab(time) ;
		Rec2_Stab:long_name = "Receiver2 Temperature Stability" ;
		Rec2_Stab:units = "K" ;
	int FreeMem(time) ;
		FreeMem:long_name = "Free Disk Memory" ;
		FreeMem:unit = "kBytes" ;
	int QualFl(time) ;
		QualFl:long_name = "Quality Flags Bit Field" ;
		QualFl:units = "unitless" ;
		QualFl:comment = "meaning of the quality bits can be found in appendix A of the operational manual" ;
	int StatFl(time) ;
		StatFl:long_name = "Radiometer Status Flags" ;
		StatFl:units = "unitless" ;
		StatFl:comment = "meaning of the status flags can be found in appendix A of the operational manual" ;

// global attributes:
		:netCDF_Convention = " CF-1.0" ;
		:Radiometer_Location = " University of Madison" ;
		:Radiometer_System = " RPG-HATPRO" ;
		:Serial_Number = " R-DPR-19/007" ;
		:Station_Altitude = " 200" ;
		:Station_Longitude = " 85?43\'55\'\' West" ;
		:Station_Latitude = " 43?22\'42\'\' North" ;
		:Comment = " " ;
		:Radiometer_Software_Version = "V9.69" ;
		:Host-PC_Software_Version = "V9.69" ;
}

```
:::

#### MET

| var | dims | new_dims | fn | units | details |
|-|-|-|-|-|-----|
| time | time | time' | count | 1 | The number of data records every 15 minutes, proxy for instrument uptime |
| Surf_P | time | time' | mean, std | hPa | 15-minute mean and standard deviation of surface pressure |
| Surf_T | time | time' | mean, std | K | 15-minute mean and standard deviation of surface temperature |
| Surf_RH | time | time' | mean, std | % | 15-minute mean and standard deviation of surface relative humidity |
| RF |  time | time' | sum | 1 | The number of data points where the rain flag is present, should match RF from the BRT data stream |
: {.striped .bordered}


##### ncdump
::: {.callout-note collapse='true' appearance='minimal' title='ncdump'}
```
ncdump -h 23100919.MET.NC

netcdf \23100919.MET {
dimensions:
	time = UNLIMITED ; // (3469 currently)
variables:
	int file_code ;
		file_code:long_name = "four byte code identifying file type and version" ;
	int Rad_ID ;
		Rad_ID:long_name = "radiometer model ID" ;
		Rad_ID:comment = "RPG-HUMPRO-U90" ;
	int time(time) ;
		time:long_name = "sample time" ;
		time:units = "seconds since 1.1.2001, 00:00:00" ;
		time:comment = "time is UTC" ;
	int RSFactor ;
		RSFactor:long_name = "rapid sampling multiplier (1 / 2 / 4)" ;
		RSFactor:units = "unitless" ;
		RSFactor:Comment = "Sampling interval: 1: 1 sec, 2: 0.5 sec , 4: 0.25 sec" ;
	int IntSampCnt ;
		IntSampCnt:long_name = "Number of Integration Samples" ;
		IntSampCnt:units = "unitless" ;
	float Min_P ;
		Min_P:long_name = "Minimum Barometric Pressure in File" ;
		Min_P:units = "hPa" ;
	float Max_P ;
		Max_P:long_name = "Maximum Barometric Pressure in File" ;
		Max_P:units = "hPa" ;
	float Surf_P(time) ;
		Surf_P:long_name = "Surface Barometric Pressure" ;
		Surf_P:units = "hPa" ;
	float Min_T ;
		Min_T:long_name = "Minimum Environmental Temperature in File" ;
		Min_T:units = "K" ;
	float Max_T ;
		Max_T:long_name = "Maximum Environmental Temperature in File" ;
		Max_T:units = "K" ;
	float Surf_T(time) ;
		Surf_T:long_name = "Surface Temperature" ;
		Surf_T:units = "K" ;
	float Min_RH ;
		Min_RH:long_name = "Minimum Relative Humidity in File" ;
		Min_RH:units = "%" ;
	float Max_RH ;
		Max_RH:long_name = "Maximum Relative Humidity in File" ;
		Max_RH:units = "%" ;
	float Surf_RH(time) ;
		Surf_RH:long_name = "Surface Relative Humidity" ;
		Surf_RH:units = "%" ;
	int RF(time) ;
		RF:long_name = "Rain Flag" ;
		RF:Info = "0 = No Rain, 1 = Raining" ;

// global attributes:
		:netCDF_Convention = " CF-1.0" ;
		:Radiometer_Location = " University of Madison" ;
		:Radiometer_System = " RPG-HATPRO" ;
		:Serial_Number = " R-DPR-19/007" ;
		:Station_Altitude = " 200" ;
		:Station_Longitude = " 85?43\'55\'\' West" ;
		:Station_Latitude = " 43?22\'42\'\' North" ;
		:Comment = " " ;
		:Radiometer_Software_Version = "V9.69" ;
		:Host-PC_Software_Version = "V9.69" ;
}


```
:::


## Energymeter

### Location

```
data
├── energymeter
    ├── energymeter.sled.level0.1sec.YYYYmmdd.000000.nc
```


### Dimensions
| dimension | resolution | length |
|-----------|------------|--------|
| time      | *FILL*     | (unlimitted) |
| time'     | 15 minutes | 96 per day |
: {.striped .bordered}

### Variables
| var | dims | new_dims | fn | units | details
|-|-|-|-|-|------|
| time | time | time' | count | 1 | The number of data records per 15 minute period, proxy for instrument uptime |
| ac_voltage | time | time' | mean, std, min, max, median | V | Statistics for the 15-minute distribution of instantaneous supplied voltage |
| ac_current | time | time' | mean, std, min, max, median | A | Statistics for the 15-minute distribution of instantaneous supplied current |
| ac_active_power | time | time' | mean, std, min, max, median | W | Statistics for the 15-minute distribution of instantaneous supplied current | 
: {.striped .bordered}


### ncdump
::: {.callout-note collapse='true' appearance='minimal' title='ncdump'}
```
ncdump -h energymeter.sled.level0.1sec.20240214.000000.nc 

netcdf energymeter.sled.level0.1sec.20240214.000000 {
dimensions:
	time = 86400 ;
variables:
	int64 time(time) ;
		time:units = "seconds since 2024-02-14 00:00:00" ;
		time:calendar = "proleptic_gregorian" ;
	double ac_voltage(time) ;
		ac_voltage:units = "volts" ;
		ac_voltage:long_name = "measured voltage of 120v AC supplied power" ;
		ac_voltage:instrument = "EEM-MA370" ;
		ac_voltage:cf_name = "" ;
		ac_voltage:missing_value = -9999. ;
		ac_voltage:max_val = 120.38037 ;
		ac_voltage:min_val = 102.43096 ;
		ac_voltage:avg_val = 115.42120684661 ;
		ac_voltage:perc_missing = 39.15 ;
	double ac_current(time) ;
		ac_current:units = "amps" ;
		ac_current:long_name = "instantaneous current supplied by 120v AC source" ;
		ac_current:instrument = "EEM-MA370" ;
		ac_current:cf_name = "" ;
		ac_current:missing_value = -9999. ;
		ac_current:max_val = 10.92572 ;
		ac_current:min_val = 2.57099 ;
		ac_current:avg_val = 3.39363464334627 ;
		ac_current:perc_missing = 39.15 ;
	double ac_active_power(time) ;
		ac_active_power:units = "watts" ;
		ac_active_power:long_name = "instantaneous active power supplied by 120v AC source" ;
		ac_active_power:instrument = "EEM-MA370" ;
		ac_active_power:cf_name = "" ;
		ac_active_power:missing_value = -9999. ;
		ac_active_power:max_val = 1158.18237 ;
		ac_active_power:min_val = 282.35516 ;
		ac_active_power:avg_val = 374.549455659857 ;
		ac_active_power:perc_missing = 39.15 ;

// global attributes:
		:date_created = "2024-02-14 00:00:11.186317" ;
		:level = "0" ;
		:title = "energy meter measurements made on ICECAPS autonomous platform" ;
		:contact = "Michael Gallagher, University of Colorado, michael.r.gallagher@noaa.gov" ;
		:instituion = "CIRES, University of Colorado and NOAA Physical Sciences Laboratory" ;
		:file_creator = "Michael Gallagher" ;
		:creator_email = "michael.r.gallagher@noaa.gov" ;
		:funding = "" ;
		:source = "Observations made at Summit Station summer 2023 prototype deployment" ;
		:system = "THE UNNAMED PLATFORM" ;
		:keywords = "" ;
		:conventions = "" ;
		:code_version = "0.01beta" ;
		:modbus_register_ac_voltage = 32774 ;
		:modbus_register_ac_current = 32782 ;
		:modbus_register_ac_active_power = 32790 ;
}
```
:::


## MRR

### Location

```
data
├── mrr
    ├── YYYYmm
        ├── YYYYmmdd
            ├── YYYYmmdd_HHMMSS.nc
```

### Dimensions
| dimension | resolution | length |
|-----------|------------|--------|
| time      | *FILL, 10 s?*     | (unlimitted) |
| range   | 35 m | 128 |
| time'     | 15 minutes | 96 per day |
| range' | 280 m | 16 |
: {.striped .bordered}

### Variables
| var | dims | new_dims | fn | units | details
|-|-|-|-|-|------|
| time | time | time' | count | 1 | Number of data records per 15 minute period, proxy for instrument uptime |
| Z | time, range | time', range' | median, std | dBZ | Log-reflectivity |
| VEL | time, range | time', range' | median, std | m s$^{-1}$ | Doppler velocity |
| WIDTH | time, range | time', range' | median, std |m s$^{-1}$ | Doppler spectrum width |
| RR | time, range | time' | mean | mm hr$^{-1}$ | Mean rainfall rate throughout the collumn |
| LWC | time, range | time' | mean( sum\[range\] ) | g m$^{-2}$ | Mean liquid water path |
: {.striped .bordered}

### ncdump
::: {.callout-note collapse='true' appearance='minimal' title='ncdump'}
```
ncdump -h 20240213_190000.nc

netcdf \20240213_190000 {
dimensions:
	time = UNLIMITED ; // (360 currently)
	range = 128 ;
	sweep = 1 ;
	string_length = 128 ;
	n_spectra = 128 ;
	spectrum_n_samples = 64 ;
variables:
	int volume_number ;
	char time_coverage_start(string_length) ;
	char time_coverage_end(string_length) ;
	char time_reference(string_length) ;
	char instrument_type(string_length) ;
	double transfer_function(range) ;
	double calibration_constant ;
	double latitude ;
		latitude:units = "degrees_north" ;
	double longitude ;
		longitude:units = "degrees_east" ;
	double altitude ;
		altitude:units = "meters" ;
	double doppler_shift_spectrum ;
	int sweep_number(sweep) ;
	char sweep_mode(sweep, string_length) ;
	float fixed_angle(sweep) ;
	int sweep_start_ray_index(sweep) ;
	int sweep_end_ray_index(sweep) ;
	float range(range) ;
		range:standard\ name = "projection_range_coordinate" ;
		range:long_name = "range_to_measurement_volume" ;
		range:units = "meters" ;
		range:spacing_is_constant = "true" ;
		range:meters_to_center_of_first_gate = 0.f ;
		range:meters_between_gates = 35.f ;
		range:axis = "radial_range_coordinate" ;
	double time(time) ;
		time:standard\ name = "time" ;
		time:long_name = "time_in_seconds_since_volume_start" ;
		time:units = "seconds since 1970-01-01T00:00:00Z" ;
		time:calendar = "standard" ;
	float elevation(time) ;
		elevation:standard\ name = "ray_elevation_angle" ;
		elevation:long_name = "elevation_angle_from_horizontal_plane" ;
		elevation:units = "degrees" ;
		elevation:axis = "radial_elevation_coordinate" ;
	float azimuth(time) ;
		azimuth:standard\ name = "ray_azimuth_angle" ;
		azimuth:long_name = "azimuth_angle_from_true_north" ;
		azimuth:units = "degrees" ;
		azimuth:axis = "radial_azimuth_coordinate" ;
	float Za(time, range) ;
		Za:standard_name = "log_attenuated_reflectivity" ;
		Za:long_name = "" ;
		Za:units = "dBZ" ;
		Za:_FillValue = NaNf ;
		Za:coordinates = "elevation azimuth range" ;
		Za:field_folds = "false" ;
		Za:fold_limit_lower = 0.f ;
		Za:fold_limit_upper = 0.f ;
		Za:thresholding_xml = "" ;
		Za:legend_xml = "" ;
		Za:is_discreet = "false" ;
	double Z(time, range) ;
		Z:standard_name = "log_reflectivity" ;
		Z:long_name = "" ;
		Z:units = "dBZ" ;
		Z:_FillValue = NaN ;
		Z:coordinates = "elevation azimuth range" ;
		Z:field_folds = "false" ;
		Z:fold_limit_lower = 0.f ;
		Z:fold_limit_upper = 0.f ;
		Z:thresholding_xml = "" ;
		Z:legend_xml = "" ;
		Z:is_discreet = "false" ;
	double Zea(time, range) ;
		Zea:standard_name = "attenuated_equivalent_reflectivity_factor" ;
		Zea:long_name = "" ;
		Zea:units = "dBZ" ;
		Zea:_FillValue = NaN ;
		Zea:coordinates = "elevation azimuth range" ;
		Zea:field_folds = "false" ;
		Zea:fold_limit_lower = 0.f ;
		Zea:fold_limit_upper = 0.f ;
		Zea:thresholding_xml = "" ;
		Zea:legend_xml = "" ;
		Zea:is_discreet = "false" ;
	double Ze(time, range) ;
		Ze:standard_name = "equivalent_reflectivity_factor" ;
		Ze:long_name = "" ;
		Ze:units = "dBZ" ;
		Ze:_FillValue = NaN ;
		Ze:coordinates = "elevation azimuth range" ;
		Ze:field_folds = "false" ;
		Ze:fold_limit_lower = 0.f ;
		Ze:fold_limit_upper = 0.f ;
		Ze:thresholding_xml = "" ;
		Ze:legend_xml = "" ;
		Ze:is_discreet = "false" ;
	double RR(time, range) ;
		RR:standard_name = "rainfall_rate" ;
		RR:long_name = "" ;
		RR:units = "mm h-1" ;
		RR:_FillValue = NaN ;
		RR:coordinates = "elevation azimuth range" ;
		RR:field_folds = "false" ;
		RR:fold_limit_lower = 0.f ;
		RR:fold_limit_upper = 0.f ;
		RR:thresholding_xml = "" ;
		RR:legend_xml = "" ;
		RR:is_discreet = "false" ;
	double LWC(time, range) ;
		LWC:standard_name = "mass_concentration_of_liquid_water_in_air" ;
		LWC:long_name = "" ;
		LWC:units = "g m-3" ;
		LWC:_FillValue = NaN ;
		LWC:coordinates = "elevation azimuth range" ;
		LWC:field_folds = "false" ;
		LWC:fold_limit_lower = 0.f ;
		LWC:fold_limit_upper = 0.f ;
		LWC:thresholding_xml = "" ;
		LWC:legend_xml = "" ;
		LWC:is_discreet = "false" ;
	double PIA(time, range) ;
		PIA:standard_name = "path_integrated_rain_attenuation" ;
		PIA:long_name = "" ;
		PIA:units = "dB" ;
		PIA:_FillValue = NaN ;
		PIA:coordinates = "elevation azimuth range" ;
		PIA:field_folds = "false" ;
		PIA:fold_limit_lower = 0.f ;
		PIA:fold_limit_upper = 0.f ;
		PIA:thresholding_xml = "" ;
		PIA:legend_xml = "" ;
		PIA:is_discreet = "false" ;
	float VEL(time, range) ;
		VEL:standard_name = "radial_velocity_of_scatterers_towards_instrument" ;
		VEL:long_name = "" ;
		VEL:units = "m s-1" ;
		VEL:_FillValue = NaNf ;
		VEL:coordinates = "elevation azimuth range" ;
		VEL:field_folds = "true" ;
		VEL:fold_limit_lower = -0.f ;
		VEL:fold_limit_upper = 11.89033f ;
		VEL:thresholding_xml = "" ;
		VEL:legend_xml = "" ;
		VEL:is_discreet = "false" ;
	double WIDTH(time, range) ;
		WIDTH:standard_name = "doppler_spectrum_width" ;
		WIDTH:long_name = "" ;
		WIDTH:units = "m/s" ;
		WIDTH:_FillValue = NaN ;
		WIDTH:coordinates = "elevation azimuth range" ;
		WIDTH:field_folds = "false" ;
		WIDTH:fold_limit_lower = 0.f ;
		WIDTH:fold_limit_upper = 0.f ;
		WIDTH:thresholding_xml = "" ;
		WIDTH:legend_xml = "" ;
		WIDTH:is_discreet = "false" ;
	double ML(time, range) ;
		ML:standard_name = "melting_layer" ;
		ML:long_name = "" ;
		ML:units = "" ;
		ML:_FillValue = NaN ;
		ML:coordinates = "elevation azimuth range" ;
		ML:field_folds = "false" ;
		ML:fold_limit_lower = 0.f ;
		ML:fold_limit_upper = 0.f ;
		ML:thresholding_xml = "" ;
		ML:legend_xml = "" ;
		ML:is_discreet = "false" ;
	float SNR(time, range) ;
		SNR:standard_name = "signal_to_noise_ratio" ;
		SNR:long_name = "" ;
		SNR:units = "dB" ;
		SNR:_FillValue = NaNf ;
		SNR:coordinates = "elevation azimuth range" ;
		SNR:field_folds = "false" ;
		SNR:fold_limit_lower = 0.f ;
		SNR:fold_limit_upper = 0.f ;
		SNR:thresholding_xml = "" ;
		SNR:legend_xml = "" ;
		SNR:is_discreet = "false" ;
	int index_spectra(time, range) ;
		index_spectra:standard_name = "index variable spectra" ;
		index_spectra:long_name = "" ;
		index_spectra:units = "" ;
		index_spectra:_FillValue = -2147483648 ;
		index_spectra:coordinates = "elevation azimuth range" ;
		index_spectra:field_folds = "false" ;
		index_spectra:fold_limit_lower = 0.f ;
		index_spectra:fold_limit_upper = 0.f ;
		index_spectra:thresholding_xml = "" ;
		index_spectra:legend_xml = "" ;
		index_spectra:is_discreet = "true" ;
	double spectrum_raw(time, n_spectra, spectrum_n_samples) ;
		spectrum_raw:standard\ name = "log_attenuated_power" ;
		spectrum_raw:long_name = "" ;
		spectrum_raw:units = "dB" ;
		spectrum_raw:_FillValue = NaN ;
		spectrum_raw:coordinates = "elevation azimuth range" ;
		spectrum_raw:index_var_name = "" ;
		spectrum_raw:block_avg_length = 0 ;
		spectrum_raw:is_spectrum = "true" ;
	double N(time, n_spectra, spectrum_n_samples) ;
		N:standard\ name = "drop_size_distribution" ;
		N:long_name = "" ;
		N:units = "1" ;
		N:_FillValue = NaN ;
		N:coordinates = "elevation azimuth range" ;
		N:index_var_name = "" ;
		N:block_avg_length = 0 ;
		N:is_spectrum = "true" ;
	double D(n_spectra, spectrum_n_samples) ;
		D:standard\ name = "drop_sizes" ;
		D:long_name = "" ;
		D:units = "1" ;
		D:_FillValue = NaN ;
		D:coordinates = "elevation azimuth range" ;
		D:index_var_name = "" ;
		D:block_avg_length = 0 ;
		D:is_spectrum = "true" ;

// global attributes:
		:Conventions = "CF/Radial" ;
		:version = "1.3" ;
		:title = "METEK MRR Pro 1.2.5 Data" ;
		:institution = "" ;
		:references = "" ;
		:source = "" ;
		:history = "" ;
		:comment = "Data Validation and Co-Location at Summit Station Greenland" ;
		:instrument_name = "METEK MRR Pro 1.2.5, ID: MRRPro92, METEK Serial Number:  0515028928, Software:  MRR Pro 1.2.5" ;
		:site_name = "ICECAPS-Melt Summit" ;
		:field_names = "Za,Z,Zea,Ze,RR,LWC,PIA,VEL,WIDTH,SNR,spectrum_reflectivity,N" ;
}
```
:::





## ASFS -- NEW

This is a summary of the ASFS files created by MG, level1 processed .nc files (yay for binary formats).

### Location

```
data
├── asfs
    ├── level0
    |   ├── ...
	|
    ├── level1
    |   ├── slow.level1.melt-sleighsfs.YYYYmmdd.HHMMSS.nc
	|
	├── raw/crd/...
```

### Dimensions
| dimension | resolution | length |
|-----------|------------|--------|
| time | 1 Minute | 1440 per day |
| time' | 15 minutes | 96 per day |
: {.striped .bordered}

### Variables

::: {.callout-note}
All of the variables in the .nc files are described below. However, only the _Avg values are considered (currently) in the summarisation process.
:::

| var | dims | new_dims | fn | units | details
|-|-|-|-|-|------|
time | time | time' | count | 1 | number of data records made in 15 minute period
metek_InclX_Avg | ('time',) | ('time',)' | mean, std | deg | sensor inclinometer pitch angle |
metek_InclY_Avg | ('time',) | ('time',)' | mean, std | deg | sensor inclinometer roll angle |
PTemp_Avg | ('time',) | ('time',)' | mean, std | degC | logger electronics panel temperature |
batt_volt_Avg | ('time',) | ('time',)' | mean, std | V | voltage of the power source supplying the logger |
sr30_swu_DegC_Avg | ('time',) | ('time',)' | mean, std | degC | average case temperature of the downward-facing sensor during the 1 min averaging interval |
sr30_swu_Irr_Avg | ('time',) | ('time',)' | mean, std | W/m2 | average irradiance of the downward-facing sensor during the 1 min averaging interval |
sr30_swu_IrrC_Avg | ('time',) | ('time',)' | mean, std | W/m2 | average irradiance of the downward-facing sensor during the 1 min averaging interval |
sr30_swd_DegC_Avg | ('time',) | ('time',)' | mean, std | degC | average case temperature of the upward-facing sensor during the 1 min averaging interval |
sr30_swd_Irr_Avg | ('time',) | ('time',)' | mean, std | W/m2 | average irradiance of the upward-facing sensor during the 1 min averaging interval |
sr30_swd_IrrC_Avg | ('time',) | ('time',)' | mean, std | W/m2 | average irradiance of the upward-facing sensor during the 1 min averaging interval |
apogee_body_T_Avg | ('time',) | ('time',)' | mean, std | degC | average of the sensor body temperature during the 1 min averaging interval |
apogee_targ_T_Avg | ('time',) | ('time',)' | mean, std | degC | average of the sensor target 8-14 micron brightness temperature during the 1 min averaging interval |
sr50_dist_Avg | ('time',) | ('time',)' | mean, std | m | average of the uncorrected distance between the sensor and the surface during the 1 min averaging interval |
sr50_qc_Avg | ('time',) | ('time',)' | mean, std | unitless | quality number of the distance measurement |
vaisala_RH_Avg | ('time',) | ('time',)' | mean, std | % | average of the relative humidity during the 1 min averaging interval |
vaisala_T_Avg | ('time',) | ('time',)' | mean, std | degC | average of the air temperature during the 1 min averaging interval |
vaisala_P_Avg | ('time',) | ('time',)' | mean, std | hPa | average of the atmospheric pressure during the 1 min averaging interval |
ir20_lwu_mV_Avg | ('time',) | ('time',)' | mean, std | mV | average thermopile voltage of the downward-facing sensor during the 1 min averaging interval |
ir20_lwu_DegC_Avg | ('time',) | ('time',)' | mean, std | degC | average case temperature of the downward-facing sensor during the 1 min averaging interval |
ir20_lwu_Wm2_Avg | ('time',) | ('time',)' | mean, std | W/m2 | average flux from the downward-facing sensor during the 1 min averaging interval |
ir20_lwd_mV_Avg | ('time',) | ('time',)' | mean, std | mV | average thermopile voltage of the upward-facing sensor during the 1 min averaging interval |
ir20_lwd_DegC_Avg | ('time',) | ('time',)' | mean, std | degC | average case temperature of the upward-facing sensor during the 1 min averaging interval |
ir20_lwd_Wm2_Avg | ('time',) | ('time',)' | mean, std | W/m2 | average flux from the upward-facing sensor during the 1 min averaging interval |
fp_A_mV_Avg | ('time',) | ('time',)' | mean, std | mV | average thermopile voltage during 1 min averaging interval |
fp_A_Wm2_Avg | ('time',) | ('time',)' | mean, std | W/m2 | average flux during 1 min averaging interval |
fp_B_mV_Avg | ('time',) | ('time',)' | mean, std | mV | average thermopile voltage during 1 min averaging interval |
fp_B_Wm2_Avg | ('time',) | ('time',)' | mean, std | W/m2 | average flux during 1 min averaging interval |
licor_co2_str_out_Avg | ('time',) | ('time',)' | mean, std | % | average CO2 signal strength diagnostic during 1 min averaging interval |
sr30_swu_fantach_Avg | ('time',) | ('time',)' | mean, std | Hz | average fan speed of the downward-facing (SWU) pyranometer during 1 min averaging period |
sr30_swu_heatA_Avg | ('time',) | ('time',)' | mean, std | mA | average case heating current of the downward-facing sensor during 1 min averaging period |
sr30_swd_fantach_Avg | ('time',) | ('time',)' | mean, std | Hz | average fan speed of the upward-facing sensor during 1 min averaging period |
sr30_swd_heatA_Avg | ('time',) | ('time',)' | mean, std | mA | average case heating current of the upward-facing sensor during 1 min averaging period |
ir20_lwu_fan_Avg | ('time',) | ('time',)' | mean, std | mV | average fan voltage status signal of the downward-facing ventilator during the 1 min averaging period |
ir20_lwd_fan_Avg | ('time',) | ('time',)' | mean, std | mV | average fan voltage status signal of the upward-facing ventilator during the 1 min averaging period |
sr30_swu_tilt_Avg | ('time',) | ('time',)' | mean, std | deg | horizontal tilt of the downward-facing sensor |
sr30_swd_tilt_Avg | ('time',) | ('time',)' | mean, std | deg | horizontal tilt of the upward-facing sensor |
||||||
||||||
||||||
||||||
||||||
||||||
sr30_swu_DegC_Std | ('time',) | ('time',)' | mean, std | degC | standard deviation of the case of the downward-facing sensor during the 1 min averaging interval |
sr30_swu_Irr_Std | ('time',) | ('time',)' | mean, std | W/m2 | standard deviation of the irradiance of the downward-facing sensor during the 1 min averaging interval |
sr30_swu_IrrC_Std | ('time',) | ('time',)' | mean, std | W/m2 | standard deviation of the temperature-corrected irradiance of the downward-facing sensor during the 1 min averaging interval |
sr30_swd_DegC_Std | ('time',) | ('time',)' | mean, std | degC | standard deviation of the case of the upward-facing sensor during the 1 min averaging interval |
sr30_swd_Irr_Std | ('time',) | ('time',)' | mean, std | W/m2 | standard deviation of the irradiance of the upward-facing sensor during the 1 min averaging interval |
sr30_swd_IrrC_Std | ('time',) | ('time',)' | mean, std | W/m2 | standard deviation of the temperature-corrected irradiance of the upward-facing sensor during the 1 min averaging interval |
apogee_body_T_Std | ('time',) | ('time',)' | mean, std | degC | standard deviation of the infrared thermometer body temperature during the 1 min averaging interval |
apogee_targ_T_Std | ('time',) | ('time',)' | mean, std | degC | standard deviation of the the sensor target 8-14 micron brightness temperature during the 1 min averaging interval |
sr50_dist_Std | ('time',) | ('time',)' | mean, std | m | standard deviation of the uncorrected distance between the sensor and the surface during the 1 min averaging interval |
vaisala_RH_Std | ('time',) | ('time',)' | mean, std | % | standard deviation of the relative humidity during the 1 min averaging interval |
vaisala_T_Std | ('time',) | ('time',)' | mean, std | degC | standard deviation of the air temperature during the 1 min averaging interval |
vaisala_P_Std | ('time',) | ('time',)' | mean, std | hPa | standard deviation of the atmospheric pressure during the 1 min averaging interval |
ir20_lwu_mV_Std | ('time',) | ('time',)' | mean, std | mV | standard deviation of the thermopile voltage of the downward-facing sensor during the 1 min averaging interval |
ir20_lwu_DegC_Std | ('time',) | ('time',)' | mean, std | degC | standard deviation of the case temperature of the downward-facing sensor during the 1 min averaging interval |
ir20_lwu_Wm2_Std | ('time',) | ('time',)' | mean, std | W/m2 | standard deviation of the flux from the downward-facing sensor during the 1 min averaging interval |
ir20_lwd_mV_Std | ('time',) | ('time',)' | mean, std | mV | standard deviation of the thermopile voltage of the upward-facing sensor during the 1 min averaging interval |
ir20_lwd_DegC_Std | ('time',) | ('time',)' | mean, std | degC | standard deviation of the case temperature of the upward-facing sensor during the 1 min averaging interval |
ir20_lwd_Wm2_Std | ('time',) | ('time',)' | mean, std | W/m2 | standard deviation of the flux from the sensor pyrgeometer during the 1 min averaging interval |
fp_A_mV_Std | ('time',) | ('time',)' | mean, std | mV | standard deviation of the thermopile voltage during 1 min averaging interval |
fp_A_Wm2_Std | ('time',) | ('time',)' | mean, std | W/m2 | standard deviation of the flux during 1 min averaging interval |
fp_B_mV_Std | ('time',) | ('time',)' | mean, std | mV | standard deviation of the thermopile voltage during 1 min averaging interval |
fp_B_Wm2_Std | ('time',) | ('time',)' | mean, std | W/m2 | standard deviation of the flux during 1 min averaging interval |
licor_co2_str_out_Std | ('time',) | ('time',)' | mean, std | % | standard deviation of the CO2 signal strength diagnostic during 1 min averaging interval |
wspd_u_mean | ('time',) | ('time',)' | mean, std | m/s | Metek u-component |
wspd_v_mean | ('time',) | ('time',)' | mean, std | m/s | Metek v-component |
wspd_w_mean | ('time',) | ('time',)' | mean, std | m/s | Metek w-component |
wspd_vec_mean | ('time',) | ('time',)' | mean, std | m/s | average metek wind speed |
wdir_vec_mean | ('time',) | ('time',)' | mean, std | degrees | average metek wind direction |

: {.striped .bordered}

### ncdump

::: {.callout-note collapse='true' appearance='minimal' title='ncdump'}

```
ncdump -h asfs/level1/slow.level1.melt-sleighsfs.20240315.000000.nc





netcdf slow.level1.melt-sleighsfs.20240315.000000 {
dimensions:
	time = UNLIMITED ; // (1440 currently)
variables:
	int base_time ;
		base_time:string = "2024-03-15T00:00:00.000000" ;
		base_time:long_name = "Base time since Epoch" ;
		base_time:units = "seconds since 1970-01-01T00:00:00.000000" ;
		base_time:ancillary_variables = "time_offset" ;
	double time(time) ;
		time:units = "seconds since 2024-03-15T00:00:00.000000" ;
		time:delta_t = "0000-00-00 00:01:00" ;
		time:long_name = "Time offset from midnight" ;
		time:calendar = "standard" ;
	double time_offset(time) ;
		time_offset:units = "seconds since 2024-03-15T00:00:00.000000" ;
		time_offset:delta_t = "0000-00-00 00:01:00" ;
		time_offset:long_name = "Time offset from base_time" ;
		time_offset:calendar = "standard" ;
	double metek_InclX_Avg(time) ;
		metek_InclX_Avg:units = "deg" ;
		metek_InclX_Avg:long_name = "sensor inclinometer pitch angle" ;
		metek_InclX_Avg:instrument = "Metek uSonic-Cage MP sonic anemometer" ;
		metek_InclX_Avg:methods = "inclination sensor embedded in anemometer sensor head; postive is anticlockwise about sonic east-west axis when viewing east to west; protocol RS-422" ;
		metek_InclX_Avg:height = "4.62 m" ;
		metek_InclX_Avg:location = "SLEIGH mast" ;
		metek_InclX_Avg:percent_missing = 0. ;
		metek_InclX_Avg:missing_value = -9999. ;
	double metek_InclY_Avg(time) ;
		metek_InclY_Avg:units = "deg" ;
		metek_InclY_Avg:long_name = "sensor inclinometer roll angle" ;
		metek_InclY_Avg:instrument = "Metek uSonic-Cage MP sonic anemometer" ;
		metek_InclY_Avg:methods = "inclination sensor embedded in anemometer sensor head; postive is anticlockwise about sonic south-north axis when viewing south to north; protocol RS-422" ;
		metek_InclY_Avg:height = "4.62 m" ;
		metek_InclY_Avg:location = "SLEIGH mast" ;
		metek_InclY_Avg:percent_missing = 0. ;
		metek_InclY_Avg:missing_value = -9999. ;
	double PTemp_Avg(time) ;
		PTemp_Avg:units = "degC" ;
		PTemp_Avg:long_name = "logger electronics panel temperature" ;
		PTemp_Avg:instrument = "Campbell CR1000X" ;
		PTemp_Avg:methods = "" ;
		PTemp_Avg:height = "N/A" ;
		PTemp_Avg:location = "logger box" ;
		PTemp_Avg:percent_missing = 0. ;
		PTemp_Avg:missing_value = -9999. ;
	double batt_volt_Avg(time) ;
		batt_volt_Avg:units = "V" ;
		batt_volt_Avg:long_name = "voltage of the power source supplying the logger" ;
		batt_volt_Avg:instrument = "CCampbell CR1000X" ;
		batt_volt_Avg:methods = "" ;
		batt_volt_Avg:height = "N/A" ;
		batt_volt_Avg:location = "logger box" ;
		batt_volt_Avg:percent_missing = 0. ;
		batt_volt_Avg:missing_value = -9999. ;
	double sr30_swu_DegC_Avg(time) ;
		sr30_swu_DegC_Avg:units = "degC" ;
		sr30_swu_DegC_Avg:long_name = "average case temperature of the downward-facing sensor during the 1 min averaging interval" ;
		sr30_swu_DegC_Avg:instrument = "Hukseflux SR30" ;
		sr30_swu_DegC_Avg:methods = "thermopile pyranometer; RS-485 protocol" ;
		sr30_swu_DegC_Avg:height = "2.8 m" ;
		sr30_swu_DegC_Avg:location = "SLEIGH boom (top of station)" ;
		sr30_swu_DegC_Avg:percent_missing = 0. ;
		sr30_swu_DegC_Avg:missing_value = -9999. ;
	double sr30_swu_DegC_Std(time) ;
		sr30_swu_DegC_Std:units = "degC" ;
		sr30_swu_DegC_Std:long_name = "standard deviation of the case of the downward-facing sensor during the 1 min averaging interval" ;
		sr30_swu_DegC_Std:instrument = "Hukseflux SR30" ;
		sr30_swu_DegC_Std:methods = "thermopile pyranometer; RS-485 protocol" ;
		sr30_swu_DegC_Std:height = "2.8 m" ;
		sr30_swu_DegC_Std:location = "SLEIGH boom (top of station)" ;
		sr30_swu_DegC_Std:percent_missing = 0. ;
		sr30_swu_DegC_Std:missing_value = -9999. ;
	double sr30_swu_Irr_Avg(time) ;
		sr30_swu_Irr_Avg:units = "W/m2" ;
		sr30_swu_Irr_Avg:long_name = "average irradiance of the downward-facing sensor during the 1 min averaging interval" ;
		sr30_swu_Irr_Avg:instrument = "thermopile pyranometer; RS-485 protocol" ;
		sr30_swu_Irr_Avg:methods = "RS-485" ;
		sr30_swu_Irr_Avg:height = "2.8 m" ;
		sr30_swu_Irr_Avg:location = "SLEIGH boom (top of station)" ;
		sr30_swu_Irr_Avg:percent_missing = 0. ;
		sr30_swu_Irr_Avg:missing_value = -9999. ;
	double sr30_swu_Irr_Std(time) ;
		sr30_swu_Irr_Std:units = "W/m2" ;
		sr30_swu_Irr_Std:long_name = "standard deviation of the irradiance of the downward-facing sensor during the 1 min averaging interval" ;
		sr30_swu_Irr_Std:instrument = "Hukseflux SR30" ;
		sr30_swu_Irr_Std:methods = "thermopile pyranometer; RS-485 protocol" ;
		sr30_swu_Irr_Std:height = "2.8 m" ;
		sr30_swu_Irr_Std:location = "SLEIGH boom (top of station)" ;
		sr30_swu_Irr_Std:percent_missing = 0. ;
		sr30_swu_Irr_Std:missing_value = -9999. ;
	double sr30_swu_IrrC_Avg(time) ;
		sr30_swu_IrrC_Avg:units = "W/m2" ;
		sr30_swu_IrrC_Avg:long_name = "average irradiance of the downward-facing sensor during the 1 min averaging interval" ;
		sr30_swu_IrrC_Avg:instrument = "Hukseflux SR30" ;
		sr30_swu_IrrC_Avg:methods = "thermopile pyranometer; RS-485 protocol" ;
		sr30_swu_IrrC_Avg:height = "2.8 m" ;
		sr30_swu_IrrC_Avg:location = "SLEIGH boom (top of station)" ;
		sr30_swu_IrrC_Avg:percent_missing = 0. ;
		sr30_swu_IrrC_Avg:missing_value = -9999. ;
	double sr30_swu_IrrC_Std(time) ;
		sr30_swu_IrrC_Std:units = "W/m2" ;
		sr30_swu_IrrC_Std:long_name = "standard deviation of the temperature-corrected irradiance of the downward-facing sensor during the 1 min averaging interval" ;
		sr30_swu_IrrC_Std:instrument = "Hukseflux SR30" ;
		sr30_swu_IrrC_Std:methods = "thermopile pyranometer; RS-485 protocol" ;
		sr30_swu_IrrC_Std:height = "2.8 m" ;
		sr30_swu_IrrC_Std:location = "SLEIGH boom (top of station)" ;
		sr30_swu_IrrC_Std:percent_missing = 0. ;
		sr30_swu_IrrC_Std:missing_value = -9999. ;
	double sr30_swd_DegC_Avg(time) ;
		sr30_swd_DegC_Avg:units = "degC" ;
		sr30_swd_DegC_Avg:long_name = "average case temperature of the upward-facing sensor during the 1 min averaging interval" ;
		sr30_swd_DegC_Avg:instrument = "Hukseflux SR30" ;
		sr30_swd_DegC_Avg:methods = "thermopile pyranometer; RS-485 protocol" ;
		sr30_swd_DegC_Avg:height = "2.8 m" ;
		sr30_swd_DegC_Avg:location = "SLEIGH boom (top of station)" ;
		sr30_swd_DegC_Avg:percent_missing = 0. ;
		sr30_swd_DegC_Avg:missing_value = -9999. ;
	double sr30_swd_DegC_Std(time) ;
		sr30_swd_DegC_Std:units = "degC" ;
		sr30_swd_DegC_Std:long_name = "standard deviation of the case of the upward-facing sensor during the 1 min averaging interval" ;
		sr30_swd_DegC_Std:instrument = "Hukseflux SR30" ;
		sr30_swd_DegC_Std:methods = "thermopile pyranometer; RS-485 protocol" ;
		sr30_swd_DegC_Std:height = "2.8 m" ;
		sr30_swd_DegC_Std:location = "SLEIGH boom (top of station)" ;
		sr30_swd_DegC_Std:percent_missing = 0. ;
		sr30_swd_DegC_Std:missing_value = -9999. ;
	double sr30_swd_Irr_Avg(time) ;
		sr30_swd_Irr_Avg:units = "W/m2" ;
		sr30_swd_Irr_Avg:long_name = "average irradiance of the upward-facing sensor during the 1 min averaging interval" ;
		sr30_swd_Irr_Avg:instrument = "Hukseflux SR30" ;
		sr30_swd_Irr_Avg:methods = "thermopile pyranometer; RS-485 protocol" ;
		sr30_swd_Irr_Avg:height = "2.8 m" ;
		sr30_swd_Irr_Avg:location = "SLEIGH boom (top of station)" ;
		sr30_swd_Irr_Avg:percent_missing = 0. ;
		sr30_swd_Irr_Avg:missing_value = -9999. ;
	double sr30_swd_Irr_Std(time) ;
		sr30_swd_Irr_Std:units = "W/m2" ;
		sr30_swd_Irr_Std:long_name = "standard deviation of the irradiance of the upward-facing sensor during the 1 min averaging interval" ;
		sr30_swd_Irr_Std:instrument = "Hukseflux SR30" ;
		sr30_swd_Irr_Std:methods = "thermopile pyranometer; RS-485 protocol" ;
		sr30_swd_Irr_Std:height = "2.8 m" ;
		sr30_swd_Irr_Std:location = "SLEIGH boom (top of station)" ;
		sr30_swd_Irr_Std:percent_missing = 0. ;
		sr30_swd_Irr_Std:missing_value = -9999. ;
	double sr30_swd_IrrC_Avg(time) ;
		sr30_swd_IrrC_Avg:units = "W/m2" ;
		sr30_swd_IrrC_Avg:long_name = "average irradiance of the upward-facing sensor during the 1 min averaging interval" ;
		sr30_swd_IrrC_Avg:instrument = "Hukseflux SR30" ;
		sr30_swd_IrrC_Avg:methods = "thermopile pyranometer; RS-485 protocol" ;
		sr30_swd_IrrC_Avg:height = "2.8 m" ;
		sr30_swd_IrrC_Avg:location = "SLEIGH boom (top of station)" ;
		sr30_swd_IrrC_Avg:percent_missing = 0. ;
		sr30_swd_IrrC_Avg:missing_value = -9999. ;
	double sr30_swd_IrrC_Std(time) ;
		sr30_swd_IrrC_Std:units = "W/m2" ;
		sr30_swd_IrrC_Std:long_name = "standard deviation of the temperature-corrected irradiance of the upward-facing sensor during the 1 min averaging interval" ;
		sr30_swd_IrrC_Std:instrument = "Hukseflux SR30" ;
		sr30_swd_IrrC_Std:methods = "thermopile pyranometer; RS-485 protocol" ;
		sr30_swd_IrrC_Std:height = "2.8 m" ;
		sr30_swd_IrrC_Std:location = "SLEIGH boom (top of station)" ;
		sr30_swd_IrrC_Std:percent_missing = 0. ;
		sr30_swd_IrrC_Std:missing_value = -9999. ;
	double apogee_body_T_Avg(time) ;
		apogee_body_T_Avg:units = "degC" ;
		apogee_body_T_Avg:long_name = "average of the sensor body temperature during the 1 min averaging interval" ;
		apogee_body_T_Avg:instrument = "Apogee SI-4H1-SS IRT" ;
		apogee_body_T_Avg:methods = "infrared thermometer; SDI-12 protocol" ;
		apogee_body_T_Avg:height = "2.8 m" ;
		apogee_body_T_Avg:location = "SLEIGH boom (top of station)" ;
		apogee_body_T_Avg:percent_missing = 0. ;
		apogee_body_T_Avg:missing_value = -9999. ;
	double apogee_body_T_Std(time) ;
		apogee_body_T_Std:units = "degC" ;
		apogee_body_T_Std:long_name = "standard deviation of the infrared thermometer body temperature during the 1 min averaging interval" ;
		apogee_body_T_Std:instrument = "Apogee SI-4H1-SS IRT" ;
		apogee_body_T_Std:methods = "infrared thermometer; SDI-12 protocol" ;
		apogee_body_T_Std:height = "2.8 m" ;
		apogee_body_T_Std:location = "SLEIGH boom (top of station)" ;
		apogee_body_T_Std:percent_missing = 0. ;
		apogee_body_T_Std:missing_value = -9999. ;
	double apogee_targ_T_Avg(time) ;
		apogee_targ_T_Avg:units = "degC" ;
		apogee_targ_T_Avg:long_name = "average of the sensor target 8-14 micron brightness temperature during the 1 min averaging interval" ;
		apogee_targ_T_Avg:instrument = "Apogee SI-4H1-SS IRT" ;
		apogee_targ_T_Avg:methods = "thermopile infrared thermometer; SDI-12 protocol" ;
		apogee_targ_T_Avg:height = "surface" ;
		apogee_targ_T_Avg:location = "SLEIGH boom (top of station)" ;
		apogee_targ_T_Avg:percent_missing = 0. ;
		apogee_targ_T_Avg:missing_value = -9999. ;
	double apogee_targ_T_Std(time) ;
		apogee_targ_T_Std:units = "degC" ;
		apogee_targ_T_Std:long_name = "standard deviation of the the sensor target 8-14 micron brightness temperature during the 1 min averaging interval" ;
		apogee_targ_T_Std:instrument = "Apogee SI-4H1-SS IRT" ;
		apogee_targ_T_Std:methods = "thermopile infrared thermometer; SDI-12 protocol" ;
		apogee_targ_T_Std:height = "surface" ;
		apogee_targ_T_Std:location = "SLEIGH boom (top of station)" ;
		apogee_targ_T_Std:percent_missing = 0. ;
		apogee_targ_T_Std:missing_value = -9999. ;
	double sr50_dist_Avg(time) ;
		sr50_dist_Avg:units = "m" ;
		sr50_dist_Avg:long_name = "average of the uncorrected distance between the sensor and the surface during the 1 min averaging interval" ;
		sr50_dist_Avg:instrument = "SR50A" ;
		sr50_dist_Avg:methods = "acoustic ranger; SDI-12 protocol" ;
		sr50_dist_Avg:height = "surface" ;
		sr50_dist_Avg:location = "SLEIGH boom (top of station)" ;
		sr50_dist_Avg:percent_missing = 0. ;
		sr50_dist_Avg:missing_value = -9999. ;
	double sr50_dist_Std(time) ;
		sr50_dist_Std:units = "m" ;
		sr50_dist_Std:long_name = "standard deviation of the uncorrected distance between the sensor and the surface during the 1 min averaging interval" ;
		sr50_dist_Std:instrument = "SR50A" ;
		sr50_dist_Std:methods = "acoustic ranger; SDI-12 protocol" ;
		sr50_dist_Std:height = "surface" ;
		sr50_dist_Std:location = "SLEIGH boom (top of station)" ;
		sr50_dist_Std:percent_missing = 0. ;
		sr50_dist_Std:missing_value = -9999. ;
	double sr50_qc_Avg(time) ;
		sr50_qc_Avg:units = "unitless" ;
		sr50_qc_Avg:long_name = "quality number of the distance measurement" ;
		sr50_qc_Avg:instrument = "SR50A" ;
		sr50_qc_Avg:methods = "acoustic ranger; SDI-12 protocol" ;
		sr50_qc_Avg:height = "surface" ;
		sr50_qc_Avg:location = "SLEIGH boom (top of station)" ;
		sr50_qc_Avg:percent_missing = 0. ;
		sr50_qc_Avg:missing_value = -9999. ;
	double vaisala_RH_Avg(time) ;
		vaisala_RH_Avg:units = "%" ;
		vaisala_RH_Avg:long_name = "average of the relative humidity during the 1 min averaging interval" ;
		vaisala_RH_Avg:instrument = "Vaisala PTU300" ;
		vaisala_RH_Avg:methods = "meteorology sensor, heated capacitive thin-film polymer; RS-485 protocol" ;
		vaisala_RH_Avg:height = "2.60 m" ;
		vaisala_RH_Avg:location = "SLEIGH boom (top of station)" ;
		vaisala_RH_Avg:percent_missing = 0. ;
		vaisala_RH_Avg:missing_value = -9999. ;
	double vaisala_RH_Std(time) ;
		vaisala_RH_Std:units = "%" ;
		vaisala_RH_Std:long_name = "standard deviation of the relative humidity during the 1 min averaging interval" ;
		vaisala_RH_Std:instrument = "Vaisala PTU300" ;
		vaisala_RH_Std:methods = "meteorology sensor, heated capacitive thin-film polymer; RS-485 protocol" ;
		vaisala_RH_Std:height = "2.60 m" ;
		vaisala_RH_Std:location = "SLEIGH boom (top of station)" ;
		vaisala_RH_Std:percent_missing = 0. ;
		vaisala_RH_Std:missing_value = -9999. ;
	double vaisala_T_Avg(time) ;
		vaisala_T_Avg:units = "degC" ;
		vaisala_T_Avg:long_name = "average of the air temperature during the 1 min averaging interval" ;
		vaisala_T_Avg:instrument = "Vaisala PTU300" ;
		vaisala_T_Avg:methods = "meteorology sensor, PT100 RTD; RS-485 protocol" ;
		vaisala_T_Avg:height = "2.89 m" ;
		vaisala_T_Avg:location = "SLEIGH boom (top of station)" ;
		vaisala_T_Avg:percent_missing = 0. ;
		vaisala_T_Avg:missing_value = -9999. ;
	double vaisala_T_Std(time) ;
		vaisala_T_Std:units = "degC" ;
		vaisala_T_Std:long_name = "standard deviation of the air temperature during the 1 min averaging interval" ;
		vaisala_T_Std:instrument = "Vaisala PTU300" ;
		vaisala_T_Std:methods = "meteorology sensor, PT100 RTD; RS-485 protocol" ;
		vaisala_T_Std:height = "2.89 m" ;
		vaisala_T_Std:location = "SLEIGH boom (top of station)" ;
		vaisala_T_Std:percent_missing = 0. ;
		vaisala_T_Std:missing_value = -9999. ;
	double vaisala_P_Avg(time) ;
		vaisala_P_Avg:units = "hPa" ;
		vaisala_P_Avg:long_name = "average of the atmospheric pressure during the 1 min averaging interval" ;
		vaisala_P_Avg:instrument = "Vaisala PTU300" ;
		vaisala_P_Avg:methods = "meteorology sensor; RS-485 protocol" ;
		vaisala_P_Avg:height = "2.68 m" ;
		vaisala_P_Avg:location = "SLEIGH boom (top of station)" ;
		vaisala_P_Avg:percent_missing = 0. ;
		vaisala_P_Avg:missing_value = -9999. ;
	double vaisala_P_Std(time) ;
		vaisala_P_Std:units = "hPa" ;
		vaisala_P_Std:long_name = "standard deviation of the atmospheric pressure during the 1 min averaging interval" ;
		vaisala_P_Std:instrument = "Vaisala PTU300" ;
		vaisala_P_Std:methods = "meteorology sensor; RS-485 protocol" ;
		vaisala_P_Std:height = "2.68 m" ;
		vaisala_P_Std:location = "SLEIGH boom (top of station)" ;
		vaisala_P_Std:percent_missing = 0. ;
		vaisala_P_Std:missing_value = -9999. ;
	double ir20_lwu_mV_Avg(time) ;
		ir20_lwu_mV_Avg:units = "mV" ;
		ir20_lwu_mV_Avg:long_name = "average thermopile voltage of the downward-facing sensor during the 1 min averaging interval" ;
		ir20_lwu_mV_Avg:instrument = "Hukseflux IR20" ;
		ir20_lwu_mV_Avg:methods = "thermopile pyrgeometer; analog; differential voltage" ;
		ir20_lwu_mV_Avg:height = "2.8 m" ;
		ir20_lwu_mV_Avg:location = "SLEIGH boom (top of station)" ;
		ir20_lwu_mV_Avg:percent_missing = 0. ;
		ir20_lwu_mV_Avg:missing_value = -9999. ;
	double ir20_lwu_mV_Std(time) ;
		ir20_lwu_mV_Std:units = "mV" ;
		ir20_lwu_mV_Std:long_name = "standard deviation of the thermopile voltage of the downward-facing sensor during the 1 min averaging interval" ;
		ir20_lwu_mV_Std:instrument = "Hukseflux IR20" ;
		ir20_lwu_mV_Std:methods = "thermopile pyrgeometer; analog; differential voltage" ;
		ir20_lwu_mV_Std:height = "2.8 m" ;
		ir20_lwu_mV_Std:location = "SLEIGH boom (top of station)" ;
		ir20_lwu_mV_Std:percent_missing = 0. ;
		ir20_lwu_mV_Std:missing_value = -9999. ;
	double ir20_lwu_DegC_Avg(time) ;
		ir20_lwu_DegC_Avg:units = "degC" ;
		ir20_lwu_DegC_Avg:long_name = "average case temperature of the downward-facing sensor during the 1 min averaging interval" ;
		ir20_lwu_DegC_Avg:instrument = "Hukseflux IR20" ;
		ir20_lwu_DegC_Avg:methods = "thermopile pyrgeometer; analog; half-bridge, 100kOhm 0.01% ref resistor; Steinhart-Hart A=0.0010295, B=0.0002391, C=0.0000001568" ;
		ir20_lwu_DegC_Avg:height = "2.8 m" ;
		ir20_lwu_DegC_Avg:location = "SLEIGH boom (top of station)" ;
		ir20_lwu_DegC_Avg:percent_missing = 0. ;
		ir20_lwu_DegC_Avg:missing_value = -9999. ;
	double ir20_lwu_DegC_Std(time) ;
		ir20_lwu_DegC_Std:units = "degC" ;
		ir20_lwu_DegC_Std:long_name = "standard deviation of the case temperature of the downward-facing sensor during the 1 min averaging interval" ;
		ir20_lwu_DegC_Std:instrument = "Hukseflux IR20" ;
		ir20_lwu_DegC_Std:methods = "thermopile pyrgeometer; analog; half-bridge, 100kOhm 0.01% ref resistor; Steinhart-Hart A=0.0010295, B=0.0002391, C=0.0000001568" ;
		ir20_lwu_DegC_Std:height = "2.8 m" ;
		ir20_lwu_DegC_Std:location = "SLEIGH boom (top of station)" ;
		ir20_lwu_DegC_Std:percent_missing = 0. ;
		ir20_lwu_DegC_Std:missing_value = -9999. ;
	double ir20_lwu_Wm2_Avg(time) ;
		ir20_lwu_Wm2_Avg:units = "W/m2" ;
		ir20_lwu_Wm2_Avg:long_name = "average flux from the downward-facing sensor during the 1 min averaging interval" ;
		ir20_lwu_Wm2_Avg:instrument = "Hukseflux IR20" ;
		ir20_lwu_Wm2_Avg:methods = "thermopile pyrgeometer; preliminary calibration: uses thermopile sensitvity but not temperature dependence" ;
		ir20_lwu_Wm2_Avg:height = "2.8 m" ;
		ir20_lwu_Wm2_Avg:location = "SLEIGH boom (top of station)" ;
		ir20_lwu_Wm2_Avg:percent_missing = 0. ;
		ir20_lwu_Wm2_Avg:missing_value = -9999. ;
	double ir20_lwu_Wm2_Std(time) ;
		ir20_lwu_Wm2_Std:units = "W/m2" ;
		ir20_lwu_Wm2_Std:long_name = "standard deviation of the flux from the downward-facing sensor during the 1 min averaging interval" ;
		ir20_lwu_Wm2_Std:instrument = "Hukseflux IR20" ;
		ir20_lwu_Wm2_Std:methods = "thermopile pyrgeometer; preliminary calibration: uses thermopile sensitvity but not temperature dependence" ;
		ir20_lwu_Wm2_Std:height = "2.8 m" ;
		ir20_lwu_Wm2_Std:location = "SLEIGH boom (top of station)" ;
		ir20_lwu_Wm2_Std:percent_missing = 0. ;
		ir20_lwu_Wm2_Std:missing_value = -9999. ;
	double ir20_lwd_mV_Avg(time) ;
		ir20_lwd_mV_Avg:units = "mV" ;
		ir20_lwd_mV_Avg:long_name = "average thermopile voltage of the upward-facing sensor during the 1 min averaging interval" ;
		ir20_lwd_mV_Avg:instrument = "Hukseflux IR20" ;
		ir20_lwd_mV_Avg:methods = "thermopile pyrgeometer; analog; differential voltage" ;
		ir20_lwd_mV_Avg:height = "2.8 m" ;
		ir20_lwd_mV_Avg:location = "SLEIGH boom (top of station)" ;
		ir20_lwd_mV_Avg:percent_missing = 0. ;
		ir20_lwd_mV_Avg:missing_value = -9999. ;
	double ir20_lwd_mV_Std(time) ;
		ir20_lwd_mV_Std:units = "mV" ;
		ir20_lwd_mV_Std:long_name = "standard deviation of the thermopile voltage of the upward-facing sensor during the 1 min averaging interval" ;
		ir20_lwd_mV_Std:instrument = "Hukseflux IR20" ;
		ir20_lwd_mV_Std:methods = "thermopile pyrgeometer; analog; differential voltage" ;
		ir20_lwd_mV_Std:height = "2.8 m" ;
		ir20_lwd_mV_Std:location = "SLEIGH boom (top of station)" ;
		ir20_lwd_mV_Std:percent_missing = 0. ;
		ir20_lwd_mV_Std:missing_value = -9999. ;
	double ir20_lwd_DegC_Avg(time) ;
		ir20_lwd_DegC_Avg:units = "degC" ;
		ir20_lwd_DegC_Avg:long_name = "average case temperature of the upward-facing sensor during the 1 min averaging interval" ;
		ir20_lwd_DegC_Avg:instrument = "Hukseflux IR20" ;
		ir20_lwd_DegC_Avg:methods = "thermopile pyrgeometer; analog; half-bridge, 100kOhm 0.01% ref resistor; Steinhart-Hart A=0.0010295, B=0.0002391, C=0.0000001568" ;
		ir20_lwd_DegC_Avg:height = "2.8 m" ;
		ir20_lwd_DegC_Avg:location = "SLEIGH boom (top of station)" ;
		ir20_lwd_DegC_Avg:percent_missing = 0. ;
		ir20_lwd_DegC_Avg:missing_value = -9999. ;
	double ir20_lwd_DegC_Std(time) ;
		ir20_lwd_DegC_Std:units = "degC" ;
		ir20_lwd_DegC_Std:long_name = "standard deviation of the case temperature of the upward-facing sensor during the 1 min averaging interval" ;
		ir20_lwd_DegC_Std:instrument = "Hukseflux IR20" ;
		ir20_lwd_DegC_Std:methods = "thermopile pyrgeometer; analog; half-bridge, 100kOhm 0.01% ref resistor; Steinhart-Hart A=0.0010295, B=0.0002391, C=0.0000001568" ;
		ir20_lwd_DegC_Std:height = "2.8 m" ;
		ir20_lwd_DegC_Std:location = "SLEIGH boom (top of station)" ;
		ir20_lwd_DegC_Std:percent_missing = 0. ;
		ir20_lwd_DegC_Std:missing_value = -9999. ;
	double ir20_lwd_Wm2_Avg(time) ;
		ir20_lwd_Wm2_Avg:units = "W/m2" ;
		ir20_lwd_Wm2_Avg:long_name = "average flux from the upward-facing sensor during the 1 min averaging interval" ;
		ir20_lwd_Wm2_Avg:instrument = "Hukseflux IR20" ;
		ir20_lwd_Wm2_Avg:methods = "thermopile pyrgeometer; preliminary calibration: uses thermopile sensitvity but not temperature dependence" ;
		ir20_lwd_Wm2_Avg:height = "2.8 m" ;
		ir20_lwd_Wm2_Avg:location = "SLEIGH boom (top of station)" ;
		ir20_lwd_Wm2_Avg:percent_missing = 0. ;
		ir20_lwd_Wm2_Avg:missing_value = -9999. ;
	double ir20_lwd_Wm2_Std(time) ;
		ir20_lwd_Wm2_Std:units = "W/m2" ;
		ir20_lwd_Wm2_Std:long_name = "standard deviation of the flux from the sensor pyrgeometer during the 1 min averaging interval" ;
		ir20_lwd_Wm2_Std:instrument = "Hukseflux IR20" ;
		ir20_lwd_Wm2_Std:methods = "thermopile pyrgeometer; preliminary calibration: uses thermopile sensitvity but not temperature dependence" ;
		ir20_lwd_Wm2_Std:height = "2.8 m" ;
		ir20_lwd_Wm2_Std:location = "SLEIGH boom (top of station)" ;
		ir20_lwd_Wm2_Std:percent_missing = 0. ;
		ir20_lwd_Wm2_Std:missing_value = -9999. ;
	double fp_A_mV_Avg(time) ;
		fp_A_mV_Avg:units = "mV" ;
		fp_A_mV_Avg:long_name = "average thermopile voltage during 1 min averaging interval" ;
		fp_A_mV_Avg:instrument = "Hukseflux HFP01" ;
		fp_A_mV_Avg:methods = "thermopile conductive flux plate; analog; differential voltage" ;
		fp_A_mV_Avg:height = "subsurface, -5 cm" ;
		fp_A_mV_Avg:location = "soil" ;
		fp_A_mV_Avg:percent_missing = 0. ;
		fp_A_mV_Avg:missing_value = -9999. ;
	double fp_A_mV_Std(time) ;
		fp_A_mV_Std:units = "mV" ;
		fp_A_mV_Std:long_name = "standard deviation of the thermopile voltage during 1 min averaging interval" ;
		fp_A_mV_Std:instrument = "Hukseflux HFP01" ;
		fp_A_mV_Std:methods = "thermopile conductive flux plate; analog; differential voltage" ;
		fp_A_mV_Std:height = "subsurface, -5 cm" ;
		fp_A_mV_Std:location = "soil" ;
		fp_A_mV_Std:percent_missing = 0. ;
		fp_A_mV_Std:missing_value = -9999. ;
	double fp_A_Wm2_Avg(time) ;
		fp_A_Wm2_Avg:units = "W/m2" ;
		fp_A_Wm2_Avg:long_name = "average flux during 1 min averaging interval" ;
		fp_A_Wm2_Avg:instrument = "Hukseflux HFP01" ;
		fp_A_Wm2_Avg:methods = "thermopile conductive flux plate; analog; differential voltage" ;
		fp_A_Wm2_Avg:height = "subsurface, -5 cm" ;
		fp_A_Wm2_Avg:location = "soil" ;
		fp_A_Wm2_Avg:percent_missing = 0. ;
		fp_A_Wm2_Avg:missing_value = -9999. ;
	double fp_A_Wm2_Std(time) ;
		fp_A_Wm2_Std:units = "W/m2" ;
		fp_A_Wm2_Std:long_name = "standard deviation of the flux during 1 min averaging interval" ;
		fp_A_Wm2_Std:instrument = "Hukseflux HFP01" ;
		fp_A_Wm2_Std:methods = "thermopile conductive flux plate; analog; differential voltage" ;
		fp_A_Wm2_Std:height = "subsurface, -5 cm" ;
		fp_A_Wm2_Std:location = "soil" ;
		fp_A_Wm2_Std:percent_missing = 0. ;
		fp_A_Wm2_Std:missing_value = -9999. ;
	double fp_B_mV_Avg(time) ;
		fp_B_mV_Avg:units = "mV" ;
		fp_B_mV_Avg:long_name = "average thermopile voltage during 1 min averaging interval" ;
		fp_B_mV_Avg:instrument = "Hukseflux HFP01" ;
		fp_B_mV_Avg:methods = "thermopile conductive flux plate; analog; differential voltage" ;
		fp_B_mV_Avg:height = "subsurface, -5 cm" ;
		fp_B_mV_Avg:location = "soil" ;
		fp_B_mV_Avg:percent_missing = 0. ;
		fp_B_mV_Avg:missing_value = -9999. ;
	double fp_B_mV_Std(time) ;
		fp_B_mV_Std:units = "mV" ;
		fp_B_mV_Std:long_name = "standard deviation of the thermopile voltage during 1 min averaging interval" ;
		fp_B_mV_Std:instrument = "Hukseflux HFP01" ;
		fp_B_mV_Std:methods = "thermopile conductive flux plate; analog; differential voltage" ;
		fp_B_mV_Std:height = "subsurface, -5 cm" ;
		fp_B_mV_Std:location = "soil" ;
		fp_B_mV_Std:percent_missing = 0. ;
		fp_B_mV_Std:missing_value = -9999. ;
	double fp_B_Wm2_Avg(time) ;
		fp_B_Wm2_Avg:units = "W/m2" ;
		fp_B_Wm2_Avg:long_name = "average flux during 1 min averaging interval" ;
		fp_B_Wm2_Avg:instrument = "Hukseflux HFP01" ;
		fp_B_Wm2_Avg:methods = "thermopile conductive flux plate; analog; differential voltage" ;
		fp_B_Wm2_Avg:height = "subsurface, -5 cm" ;
		fp_B_Wm2_Avg:location = "soil" ;
		fp_B_Wm2_Avg:percent_missing = 0. ;
		fp_B_Wm2_Avg:missing_value = -9999. ;
	double fp_B_Wm2_Std(time) ;
		fp_B_Wm2_Std:units = "W/m2" ;
		fp_B_Wm2_Std:long_name = "standard deviation of the flux during 1 min averaging interval" ;
		fp_B_Wm2_Std:instrument = "Hukseflux HFP01" ;
		fp_B_Wm2_Std:methods = "thermopile conductive flux plate; analog; differential voltage" ;
		fp_B_Wm2_Std:height = "subsurface, -5 cm" ;
		fp_B_Wm2_Std:location = "soil" ;
		fp_B_Wm2_Std:percent_missing = 0. ;
		fp_B_Wm2_Std:missing_value = -9999. ;
	double licor_co2_str_out_Avg(time) ;
		licor_co2_str_out_Avg:units = "%" ;
		licor_co2_str_out_Avg:long_name = "average CO2 signal strength diagnostic during 1 min averaging interval" ;
		licor_co2_str_out_Avg:instrument = "Licor 7500-DS" ;
		licor_co2_str_out_Avg:methods = "open-path optical gas analyzer, source data reported at 20 Hz; protocol TCP/IP" ;
		licor_co2_str_out_Avg:height = "4.4 m" ;
		licor_co2_str_out_Avg:location = "SLEIGH mast" ;
		licor_co2_str_out_Avg:percent_missing = 0. ;
		licor_co2_str_out_Avg:missing_value = -9999. ;
	double licor_co2_str_out_Std(time) ;
		licor_co2_str_out_Std:units = "%" ;
		licor_co2_str_out_Std:long_name = "standard deviation of the CO2 signal strength diagnostic during 1 min averaging interval" ;
		licor_co2_str_out_Std:instrument = "Licor 7500-DS" ;
		licor_co2_str_out_Std:methods = "open-path optical gas analyzer, source data reported at 20 Hz; protocol TCP/IP" ;
		licor_co2_str_out_Std:height = "4.4 m" ;
		licor_co2_str_out_Std:location = "SLEIGH mast" ;
		licor_co2_str_out_Std:percent_missing = 0. ;
		licor_co2_str_out_Std:missing_value = -9999. ;
	double sr30_swu_fantach_Avg(time) ;
		sr30_swu_fantach_Avg:units = "Hz" ;
		sr30_swu_fantach_Avg:long_name = "average fan speed of the downward-facing (SWU) pyranometer during 1 min averaging period" ;
		sr30_swu_fantach_Avg:instrument = "Hukseflux SR30" ;
		sr30_swu_fantach_Avg:methods = "thermopile pyranometer case fan; RS-485" ;
		sr30_swu_fantach_Avg:height = "2.8 m" ;
		sr30_swu_fantach_Avg:location = "SLEIGH boom (top of station)" ;
		sr30_swu_fantach_Avg:percent_missing = 0. ;
		sr30_swu_fantach_Avg:missing_value = -9999. ;
	double sr30_swu_heatA_Avg(time) ;
		sr30_swu_heatA_Avg:units = "mA" ;
		sr30_swu_heatA_Avg:long_name = "average case heating current of the downward-facing sensor during 1 min averaging period" ;
		sr30_swu_heatA_Avg:instrument = "Hukseflux SR30" ;
		sr30_swu_heatA_Avg:methods = "thermopile pyranometer case heater; RS-485 protocol" ;
		sr30_swu_heatA_Avg:height = "2.8 m" ;
		sr30_swu_heatA_Avg:location = "SLEIGH boom (top of station)" ;
		sr30_swu_heatA_Avg:percent_missing = 0. ;
		sr30_swu_heatA_Avg:missing_value = -9999. ;
	double sr30_swd_fantach_Avg(time) ;
		sr30_swd_fantach_Avg:units = "Hz" ;
		sr30_swd_fantach_Avg:long_name = "average fan speed of the upward-facing sensor during 1 min averaging period" ;
		sr30_swd_fantach_Avg:instrument = "Hukseflux SR30" ;
		sr30_swd_fantach_Avg:methods = "thermopile pyranometer case fan; RS-485 protocol" ;
		sr30_swd_fantach_Avg:height = "2.8 m" ;
		sr30_swd_fantach_Avg:location = "SLEIGH boom (top of station)" ;
		sr30_swd_fantach_Avg:percent_missing = 0. ;
		sr30_swd_fantach_Avg:missing_value = -9999. ;
	double sr30_swd_heatA_Avg(time) ;
		sr30_swd_heatA_Avg:units = "mA" ;
		sr30_swd_heatA_Avg:long_name = "average case heating current of the upward-facing sensor during 1 min averaging period" ;
		sr30_swd_heatA_Avg:instrument = "Hukseflux SR30" ;
		sr30_swd_heatA_Avg:methods = "thermopile pyranometer case heater; RS-485 protocol" ;
		sr30_swd_heatA_Avg:height = "2.8 m" ;
		sr30_swd_heatA_Avg:location = "SLEIGH boom (top of station)" ;
		sr30_swd_heatA_Avg:percent_missing = 0. ;
		sr30_swd_heatA_Avg:missing_value = -9999. ;
	double ir20_lwu_fan_Avg(time) ;
		ir20_lwu_fan_Avg:units = "mV" ;
		ir20_lwu_fan_Avg:long_name = "average fan voltage status signal of the downward-facing ventilator during the 1 min averaging period" ;
		ir20_lwu_fan_Avg:instrument = "Hukseflux VU01" ;
		ir20_lwu_fan_Avg:methods = "ventilator fan; analog" ;
		ir20_lwu_fan_Avg:height = "2.8 m" ;
		ir20_lwu_fan_Avg:location = "SLEIGH boom (top of station)" ;
		ir20_lwu_fan_Avg:percent_missing = 0. ;
		ir20_lwu_fan_Avg:missing_value = -9999. ;
	double ir20_lwd_fan_Avg(time) ;
		ir20_lwd_fan_Avg:units = "mV" ;
		ir20_lwd_fan_Avg:long_name = "average fan voltage status signal of the upward-facing ventilator during the 1 min averaging period" ;
		ir20_lwd_fan_Avg:instrument = "Hukseflux VU01" ;
		ir20_lwd_fan_Avg:methods = "ventilator fan; analog" ;
		ir20_lwd_fan_Avg:height = "2.8 m" ;
		ir20_lwd_fan_Avg:location = "SLEIGH boom (top of station)" ;
		ir20_lwd_fan_Avg:percent_missing = 0. ;
		ir20_lwd_fan_Avg:missing_value = -9999. ;
	double sr30_swu_tilt_Avg(time) ;
		sr30_swu_tilt_Avg:units = "deg" ;
		sr30_swu_tilt_Avg:long_name = "horizontal tilt of the downward-facing sensor" ;
		sr30_swu_tilt_Avg:instrument = "Hukseflux SR30" ;
		sr30_swu_tilt_Avg:methods = "thermopile pyranometer case level; RS-485 protocol; level defined as 180 deg" ;
		sr30_swu_tilt_Avg:height = "2.8 m" ;
		sr30_swu_tilt_Avg:location = "SLEIGH boom (top of station)" ;
		sr30_swu_tilt_Avg:percent_missing = 0. ;
		sr30_swu_tilt_Avg:missing_value = -9999. ;
	double sr30_swd_tilt_Avg(time) ;
		sr30_swd_tilt_Avg:units = "deg" ;
		sr30_swd_tilt_Avg:long_name = "horizontal tilt of the upward-facing sensor" ;
		sr30_swd_tilt_Avg:instrument = "Hukseflux SR30" ;
		sr30_swd_tilt_Avg:methods = "thermopile pyranometer case level; RS-485 protocol; level defined as 0 deg" ;
		sr30_swd_tilt_Avg:height = "2.8 m" ;
		sr30_swd_tilt_Avg:location = "SLEIGH boom (top of station)" ;
		sr30_swd_tilt_Avg:percent_missing = 0. ;
		sr30_swd_tilt_Avg:missing_value = -9999. ;
	double wspd_u_mean(time) ;
		wspd_u_mean:units = "m/s" ;
		wspd_u_mean:long_name = "Metek u-component" ;
		wspd_u_mean:cf_name = "eastward_wind" ;
		wspd_u_mean:instrument = "Metek uSonic-Cage MP sonic anemometer" ;
		wspd_u_mean:methods = "v defined positive west-to-east" ;
		wspd_u_mean:height = "4.62 m" ;
		wspd_u_mean:location = "SLEIGH mast" ;
		wspd_u_mean:percent_missing = 0. ;
		wspd_u_mean:missing_value = -9999. ;
	double wspd_v_mean(time) ;
		wspd_v_mean:units = "m/s" ;
		wspd_v_mean:long_name = "Metek v-component" ;
		wspd_v_mean:cf_name = "northward_wind" ;
		wspd_v_mean:instrument = "Metek uSonic-Cage MP sonic anemometer" ;
		wspd_v_mean:methods = "v defined positive south-to-north" ;
		wspd_v_mean:height = "4.62 m" ;
		wspd_v_mean:location = "SLEIGH mast" ;
		wspd_v_mean:percent_missing = 0. ;
		wspd_v_mean:missing_value = -9999. ;
	double wspd_w_mean(time) ;
		wspd_w_mean:units = "m/s" ;
		wspd_w_mean:long_name = "Metek w-component" ;
		wspd_w_mean:cf_name = "" ;
		wspd_w_mean:instrument = "Metek uSonic-Cage MP sonic anemometer" ;
		wspd_w_mean:methods = "w defined positive up" ;
		wspd_w_mean:height = "4.62 m" ;
		wspd_w_mean:location = "SLEIGH mast" ;
		wspd_w_mean:percent_missing = 0. ;
		wspd_w_mean:missing_value = -9999. ;
	double wspd_vec_mean(time) ;
		wspd_vec_mean:units = "m/s" ;
		wspd_vec_mean:long_name = "average metek wind speed" ;
		wspd_vec_mean:cf_name = "" ;
		wspd_vec_mean:instrument = "Metek uSonic-Cage MP sonic anemometer" ;
		wspd_vec_mean:methods = "derived from horizontal wind components after coordinate transformation from body to earth reference frame" ;
		wspd_vec_mean:height = "4.62 m" ;
		wspd_vec_mean:location = "SLEIGH mast" ;
		wspd_vec_mean:percent_missing = 0. ;
		wspd_vec_mean:missing_value = -9999. ;
	double wdir_vec_mean(time) ;
		wdir_vec_mean:units = "degrees" ;
		wdir_vec_mean:long_name = "average metek wind direction" ;
		wdir_vec_mean:cf_name = "" ;
		wdir_vec_mean:instrument = "Metek uSonic-Cage MP sonic anemometer" ;
		wdir_vec_mean:methods = "derived from horizontal wind components after coordinate transformation from body to earth reference frame" ;
		wdir_vec_mean:height = "4.62 m" ;
		wdir_vec_mean:location = "SLEIGH mast" ;
		wdir_vec_mean:percent_missing = 0. ;
		wdir_vec_mean:missing_value = -9999. ;

// global attributes:
		:date_created = "Fri Mar 15 06:09:04 2024" ;
		:title = "Integrated Characterization of Energy, Clouds, Atmospheric and Precipitation States in the Greenland Melt-zone (ICECAPS-Melt)" ;
		:institution = "CIRES/University of Colorado and NOAA Physical Sciences Laboratory (PSL)" ;
		:file_creator = "Michael R. Gallagher; Christopher J. Cox" ;
		:creator_email = "michael.r.gallagher@noaa.gov; christopher.j.cox@noaa.gov" ;
		:Funding = "Funding sources: National Science Foundation Award Number #############; NOAA Physical Science Laboratory and Arctic Research Program" ;
		:source = "Observations made by SLEIGH at camp Raven, Greenland" ;
		:system = "melt-sleighsfs" ;
		:references = "" ;
		:keywords = "Greenland, Atmosphere, Flux, Observations, Energy, Heat, Firn, Snow, Hydrology" ;
		:conventions = "cf convention variable naming as attribute whenever possible" ;
		:history = "processed data based on level 1 ingest files" ;
		:version = "1.0, 1/1/2024" ;
		:quality_control = "This Level 1 product is for archival purposes and has undergone minimal data processing and quality control, please contact the authors/PI if you would like to know more." ;
}
```

:::


## GPR

### Location

```
data
├── gpr
    ├── level0
    |   ├── 5Ghz/...
    |   ├── 7Ghz/...
	|
    ├── level1
        ├── GPR_5Ghz_YYYYmmdd.nc
        ├── GPR_7Ghz_YYYYmmdd.nc
```

### Dimensions

| dimension | resolution | length |
|-----------|------------|--------|
| time | variable, $>30$ minutes | variable |
| step | 1 | 1280 |
| step' | 40 | 32 |
: {.striped .bordered}

### 5 GHz
#### Variables

| var | dims | new_dims | fn | units | details |
|-|-|-|-|-|------|
| DM | step, time | step', time | mean std | ? | ? |
| f | time | time | mean, std | ? | ? |
: {.striped .bordered}


#### ncdump

::: {.callout-note collapse='true' appearance='minimal' title='ncdump'}

```
ncdump -h gpr/level1/GPR_5Ghz_20240318.nc




netcdf GPR_5Ghz_20240318 {
dimensions:
	step = 1280 ;
	time = 88 ;
variables:
	double DM(step, time) ;
		DM:_FillValue = NaN ;
	float f(time) ;
		f:_FillValue = NaNf ;
	int64 step(step) ;
	int64 time(time) ;
		time:units = "seconds since 2024-03-18 00:00:06" ;
		time:calendar = "proleptic_gregorian" ;

// global attributes:
		:magic = 4278067520U ;
		:cape = "Ancho" ;
		:ver = 0UB ;
		:DACMin = 2000U ;
		:DACMax = 7000U ;
		:DACStep = 32U ;
		:Iterations = 200U ;
		:PulsesPerStep = 24U ;
		:FrameStitch = 5U ;
		:PGSelect = 5U ;
		:SamplingRate = 1U ;
		:SamplersPerFrame = 1280U ;
		:OffsetDistanceFromReference = 0.f ;
		:SampleDelayToReference = 3.867e-09f ;
		:SamplesPerSecond = 3.738591e+10f ;
		:SampleDelay = 3.867e-09f ;
		:TXVoltage = 1.2f ;
		:NumTrials = 10U ;
		:FrameSize = 1292LL ;
		:NumFrames = 10LL ;
}

```

:::


### 7 GHz
#### Variables

#### ncdump

::: {.callout-note collapse='true' appearance='minimal' title='ncdump'}

```
ncdump -h gpr/level1/GPR_7Ghz_20240318.nc




netcdf GPR_7Ghz_20240318 {
dimensions:
	step = 1280 ;
	time = 22 ;
variables:
	double DM(step, time) ;
		DM:_FillValue = NaN ;
	float f(time) ;
		f:_FillValue = NaNf ;
	int64 step(step) ;
	int64 time(time) ;
		time:units = "seconds since 2024-03-18 01:03:08" ;
		time:calendar = "proleptic_gregorian" ;

// global attributes:
		:magic = 4278067520U ;
		:cape = "Ancho" ;
		:ver = 0UB ;
		:DACMin = 2000U ;
		:DACMax = 7000U ;
		:DACStep = 32U ;
		:Iterations = 200U ;
		:PulsesPerStep = 24U ;
		:FrameStitch = 5U ;
		:PGSelect = 5U ;
		:SamplingRate = 7U ;
		:SamplersPerFrame = 1280U ;
		:OffsetDistanceFromReference = 0.f ;
		:SampleDelayToReference = 3.867e-09f ;
		:SamplesPerSecond = 3.738667e+10f ;
		:SampleDelay = 3.867e-09f ;
		:TXVoltage = 1.f ;
		:NumTrials = 10U ;
		:FrameSize = 1292LL ;
		:NumFrames = 10LL ;
}


```

:::


## blesensors

This instrument records data in a `.log` format where each line is a dictionary containing a timestamp, which "box" the measurement comes from and then the temperature, humidity and battery measurements. I don't love this data format, but its a lot better than csv.

### Location

```
data
├── blesenseors
    ├── ble_temperatures_YYYYmmdd.log
```

### Dimensions

### Variables

### head

::: {.callout-note collapse='true' appearance='minimal' title='head'}
```
head data/blesensors/ble_temperatures_20240306.log -n 9


{"time":"2024-03-06 00:00:01","name":"box3","temperature":19.7,"humidity":17,"battery":100}
{"time":"2024-03-06 00:00:31","name":"box2","temperature":11.9,"humidity":27,"battery":100}
{"time":"2024-03-06 00:00:32","name":"box1","temperature":17.2,"humidity":20,"battery":100}
{"time":"2024-03-06 00:00:35","name":"box3","temperature":19.7,"humidity":17,"battery":100}
{"time":"2024-03-06 00:01:01","name":"box2","temperature":11.9,"humidity":27,"battery":100}
{"time":"2024-03-06 00:01:03","name":"box3","temperature":19.7,"humidity":17,"battery":100}
{"time":"2024-03-06 00:01:31","name":"box3","temperature":19.7,"humidity":17,"battery":100}
{"time":"2024-03-06 00:01:31","name":"box2","temperature":11.9,"humidity":27,"battery":100}
{"time":"2024-03-06 00:01:32","name":"box1","temperature":17.2,"humidity":20,"battery":100}
```
:::

## OGRE

::: {.callout-note title='No data'}
Currently, there is no available OGRE data. I will begin working on a data summary as soon as data is available on iceman.
:::

### Location

```
data
├── ogre
    ├── ????????
```

### Dimensions

### Variables

### ncdump

::: {.callout-note collapse='true' appearance='minimal' title='ncdump'}
```
placeholder
```
:::


## SIMBA

::: {.callout-note title='No data'}
Currently, there is no available SIMBA data. I will begin working on a data summary as soon as data is available on iceman.
:::

### Location

```
data
├── simba
    ├── SAMS_SIMBA_RawStream_SummitSled_YYYYmmdd.HHMMSS.dat
```

### Dimensions

### Variables

### ncdump

::: {.callout-note collapse='true' appearance='minimal' title='ncdump'}
```
placeholder
```
:::


# end

Wow, thanks for making it all the way down here, you must be either interested in the SIMBA instrument or ***really*** bored. Anyway, here's a ranking of all the original data storage formats:

1\. Anything that comes in a well-specified binary format

2\. `.log` files

$\infty$. `.csv`

<!---  NCDUMP BASIC CODE




### ncdump
::: {.callout-note collapse='true' appearance='minimal' title='ncdump'}
```
```
:::



-->